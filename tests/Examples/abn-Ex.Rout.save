
R Under development (unstable) (2020-06-04 r78644) -- "Unsuffered Consequences"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "abn"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "abn-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('abn')
Loading required package: nnet
Loading required package: MASS
Loading required package: lme4
Loading required package: Matrix
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("abn-package")
> ### * abn-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: . abn .
> ### Title: abn Package
> ### Aliases: overview abn abn-package
> ### Keywords: documentation package
> 
> ### ** Examples
> 
> ## Citations:
> citation('abn')

To cite `abn` modelling approach and `abn` package in publication use,
select the most appropriate among:
--------------------------------------------------------------------------------------------------------

To cite use of `abn` underlaying methodology in applied research for
publications use:

  Lewis, F. I., & Ward, M. P. (2013). Improving epidemiologic data
  analyses through multivariate regression modelling. Emerging themes
  in epidemiology, 10(1), 4.

To cite use of the Bayesian implementation of `abn` in publications
use:

  Kratzer, G., Lewis, F.I.,Comin, A., Pittavino, M. and Furrer, R.
  (2019). Additive Bayesian Network Modelling with the R Package abn.
  arXiv preprint arXiv:1911.09006

To cite use of the MLE implementation `abn` in publications use:

  Kratzer, G. and Furrer, R. (2018). Information-Theoretic Scoring
  Rules to Learn Additive Bayesian Network Applied to Epidemiology.
  arXiv preprint arXiv:1808.01126

To cite use of the R package `abn` in publications use:

  Kratzer, G. , Pittavino, M, Lewis, F.I. and Furrer, R. (2019). abn:
  an R package for modelling multivariate data using additive Bayesian
  networks. R package version 2.2.
  https://CRAN.R-project.org/package=abn

To see these entries in BibTeX format, use 'print(<citation>,
bibtex=TRUE)', 'toBibtex(.)', or set
'options(citation.bibtex.max=999)'.

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("abn-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("build_score_cache")
> ### * build_score_cache
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: buildscorecache
> ### Title: Build a cache of goodness of fit metrics for each node in a DAG,
> ###   possibly subject to user-defined restrictions
> ### Aliases: buildscorecache
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> #################################################################
> ## Example 1
> #################################################################
> 
> mydat <- ex0.dag.data[,c("b1","b2","g1","g2","b3","g3")] ## take a subset of cols
> 
> ## setup distribution list for each node
> mydists <- list(b1="binomial", b2="binomial", g1="gaussian",
+               g2="gaussian", b3="binomial", g3="gaussian")
> 
> # Structural constraints
> # ban arc from b2 to b1 
> # always retain arc from g2 to g1
> 
> ## parent limits
> max.par <- list("b1"=2, "b2"=2, "g1"=2, "g2"=2, "b3"=2, "g3"=2)
> 
> ## now build the cache of pre-computed scores accordingly to the structural constraints
> 
> res.c <- buildscorecache(data.df=mydat, data.dists=mydists,
+               dag.banned= ~b1|b2, dag.retained= ~g1|g2, max.parents=max.par)
> 
> 
> ## repeat but using R-INLA. The mlik's should be virtually identical.
> ## now build cache
> res.inla <- buildscorecache(data.df=mydat, data.dists=mydists,
+               dag.banned= ~b1|b2, dag.retained= ~g1|g2, max.parents=max.par,
+               max.mode.error=100)
> 
> ## plot comparison - very similar
> plot(res.c$mlik, res.inla$mlik, pch="+") 
> abline(0, 1)
> 
> 
> #################################################################
> ## Example 2 - much bigger problem using glm - may take a while
> #################################################################
> 
> mydat <- ex2.dag.data ## this data comes with abn see ?ex2.dag.data
> 
> ## setup distribution list for each node
> mydists <- list(b1="binomial", g1="gaussian", p1="poisson",
+                 b2="binomial", g2="gaussian", p2="poisson",
+                 b3="binomial", g3="gaussian", p3="poisson",
+                 b4="binomial", g4="gaussian", p4="poisson",
+                 b5="binomial", g5="gaussian", p5="poisson",
+                 b6="binomial", g6="gaussian", p6="poisson")
> 
> 
> ## no explicit ban or retain restrictions set so do not need to supply ban
> ##  or retain matrices
> 
> ## now build cache using internal code just for nodes 1,2 and 3
> ## e.g. "b1", "p1" and "g1" 
> mycache.c <- buildscorecache(data.df=mydat, data.dists=mydists,
+                          max.parents=2, which.nodes=c(1:3))
> 
> ###################################################################
> ## Example 3 - grouped data - random effects example e.g. glmm
> ###################################################################
> 
> mydat <- ex3.dag.data ## this data comes with abn see ?ex3.dag.data
> 
> mydists <- list(b1="binomial", b2="binomial", b3="binomial",
+             b4="binomial", b5="binomial", b6="binomial", b7="binomial",
+             b8="binomial", b9="binomial", b10="binomial",b11="binomial",
+             b12="binomial", b13="binomial" )
> max.par <- 2
> 
> ## in this example INLA is used as default since these are glmm nodes
> ## when running this at node-parent combination 71 the default accuracy check on the 
> ## INLA modes is exceeded (default is a max. of 10 percent difference from
> ## modes estimated using internal code) and a message is given that internal code
> ## will be used in place of INLA's results.
> 
> # mycache <- buildscorecache(data.df=mydat, data.dists=mydists, group.var="group",
> #                         cor.vars=c("b1","b2","b3","b4","b5","b6","b7",
> #                                    "b8","b9","b10","b11","b12","b13"),
> #                         max.parents=max.par, which.nodes=c(1))
> 
> mydat <- ex0.dag.data[,c("b1","b2","g1","g2","b3","g3")] ## take a subset of cols
> 
> ## setup distribution list for each node
> mydists <- list(b1="binomial", b2="binomial", g1="gaussian",
+               g2="gaussian", b3="binomial", g3="gaussian")
>              
> ## now build cache of scores (goodness of fits for each node)
> res.mle <- buildscorecache(data.df=mydat, data.dists=mydists,
+                            max.parents=3, method="mle")
> res.abn <- buildscorecache(data.df=mydat, data.dists=mydists,
+                            max.parents=3, method="Bayes")
> 
> #plot(-res.mle$bic, res.abn$mlik)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("build_score_cache", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("compareDag")
> ### * compareDag
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: compareDag
> ### Title: Compare two DAGs
> ### Aliases: compareDag
> ### Keywords: utilities
> 
> ### ** Examples
> 
> test.m <- matrix(data = c(0,1,0,
+                           0,0,0,
+                           0,0,0), nrow = 3, ncol = 3)
>     
> ref.m <- matrix(data = c(0,0,0,
+                           1,0,0,
+                           1,0,0), nrow = 3, ncol = 3)
>                           
> colnames(test.m) <- rownames(test.m) <- colnames(ref.m) <- colnames(ref.m) <- c("a", "b", "c")
>                           
> compareDag(ref = ref.m, test = test.m)
$TPR
[1] 0

$FPR
[1] 0.1428571

$Accuracy
[1] 0.6666667

$FDR
[1] 2

$`G-measure`
[1] 0

$`F1-score`
[1] 0

$PPV
[1] 0

$FOR
[1] 2

$`Hamming-distance`
[1] 2

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("compareDag", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("createDag")
> ### * createDag
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: createDag
> ### Title: Create a legitimate DAGs
> ### Aliases: createDag create_abnDag
> ### Keywords: utilities
> 
> ### ** Examples
> 
> create_abnDag( ~a+b|a, data.df=c("a"=1, "b"=1))
  a b
a 0 0
b 1 0
Class 'abnDag'.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("createDag", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dag_ex0")
> ### * dag_ex0
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ex0.dag.data
> ### Title: Synthetic validation data set for use with abn library examples
> ### Aliases: ex0.dag.data
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> ## The dataset was (essentially) generated using the following code:
> datasize <- 300   
> tmp <- c(rep("y", as.integer(datasize/2)), rep("n", as.integer(datasize/2)))
> set.seed(1)
> 
> ex0.dag.data <- data.frame(b1=sample(tmp, size=datasize, replace=TRUE),
+                 b2=sample(tmp, size=datasize, replace=TRUE),
+                 b3=sample(tmp, size=datasize, replace=TRUE),
+                 b4=sample(tmp, size=datasize, replace=TRUE),
+                 b5=sample(tmp, size=datasize, replace=TRUE),
+                 b6=sample(tmp, size=datasize, replace=TRUE),
+                 b7=sample(tmp, size=datasize, replace=TRUE),
+                 b8=sample(tmp, size=datasize, replace=TRUE),
+                 b9=sample(tmp, size=datasize, replace=TRUE),
+                 b10=sample(tmp, size=datasize, replace=TRUE),
+                 g1=rnorm(datasize, mean=0,sd=1),
+                 g2=rnorm(datasize, mean=0,sd=1),
+                 g3=rnorm(datasize, mean=0,sd=1),
+                 g4=rnorm(datasize, mean=0,sd=1),
+                 g5=rnorm(datasize, mean=0,sd=1),
+                 g6=rnorm(datasize, mean=0,sd=1),
+                 g7=rnorm(datasize, mean=0,sd=1),
+                 g8=rnorm(datasize, mean=0,sd=1),
+                 g9=rnorm(datasize, mean=0,sd=1),
+                 g10=rnorm(datasize, mean=0,sd=1),
+                 p1=rpois(datasize, lambda=10),
+                 p2=rpois(datasize, lambda=10),
+                 p3=rpois(datasize, lambda=10),
+                 p4=rpois(datasize, lambda=10),
+                 p5=rpois(datasize, lambda=10),
+                 p6=rpois(datasize, lambda=10),
+                 p7=rpois(datasize, lambda=10),
+                 p8=rpois(datasize, lambda=10),
+                 p9=rpois(datasize, lambda=10),
+                 p10=rpois(datasize, lambda=10))
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dag_ex0", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dag_ex1")
> ### * dag_ex1
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ex1.dag.data
> ### Title: Synthetic validation data set for use with abn library examples
> ### Aliases: ex1.dag.data
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## The data is one realisation from the the underlying DAG:
> ex1.true.dag <- matrix(data=c(
+   0,0,0,0,0,0,0,0,0,0,
+   0,0,0,0,0,0,0,0,0,0,
+   0,0,0,0,0,0,0,0,0,0,
+   0,0,0,0,0,0,0,0,0,0,
+   1,1,0,0,0,0,0,0,0,0,
+   1,0,1,1,0,0,0,0,0,0,
+   0,1,1,1,0,0,0,0,0,0,
+   0,0,1,0,1,0,0,0,0,0,
+   0,0,1,0,0,0,1,0,0,0,
+   0,0,1,1,0,0,0,0,0,0), ncol=10, byrow=TRUE)
> 
> colnames(ex1.true.dag) <- rownames(ex1.true.dag) <-
+     c("b1","p1","g1","b2","p2","b3","g2","b4","b5","g3")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dag_ex1", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dag_ex2")
> ### * dag_ex2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ex2.dag.data
> ### Title: Synthetic validation data set for use with abn library examples
> ### Aliases: ex2.dag.data
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## The true underlying stochastic model has DAG - this data is a single realisation.
> ex2.true.dag <- matrix(data = c(
+    0,1,0,1,0,0,1,0,1,1,1,0,1,0,0,0,0,0, 
+    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
+    0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,
+    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+    0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+    0,1,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,
+    0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,
+    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+    0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,
+    0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
+    0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,
+    0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,0,0,0,
+    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+    0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,
+    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
+    0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
+    ), ncol = 18, byrow = TRUE)
> 
> colnames(ex2.true.dag) <- rownames(ex2.true.dag) <- c("b1","g1","p1","b2",
+   "g2","p2","b3","g3","p3","b4","g4","p4","b5","g5","p5","b6","g6","p6")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dag_ex2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("discretization")
> ### * discretization
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: discretization
> ### Title: Discretization of a Possibly Continuous Data Frame of Random
> ###   Variables based on their distribution
> ### Aliases: discretization
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Generate random variable
> rv <- rnorm(n = 100, mean = 5, sd = 2)
> dist <- list("gaussian")
> names(dist) <- c("rv")
> 
> ## Compute the entropy through discretization
> entropyData(freqs.table = discretization(data.df = rv, data.dists = dist,
+             discretization.method = "sturges", nb.states = FALSE))
[1] 2.654889
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("discretization", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("entropyData")
> ### * entropyData
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: entropyData
> ### Title: Computes an Empirical Estimation of the Entropy from a Table of
> ###   Counts
> ### Aliases: entropyData
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Generate random variable
> rv <- rnorm(n = 100, mean = 0, sd = 2)
> dist <- list("gaussian")
> names(dist) <- c("rv")
> 
> ## Compute the entropy through discretization
> entropyData(discretization(data.df = rv, data.dists = dist,
+                         discretization.method = "fd", nb.states = FALSE))
[1] 0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("entropyData", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("essentialGraph")
> ### * essentialGraph
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: essentialGraph
> ### Title: Plot an ABN graphic
> ### Aliases: essentialGraph
> ### Keywords: utilities
> 
> ### ** Examples
> 
> dag <- matrix(c(0,0,0, 1,0,0, 1,1,0), nrow = 3, ncol = 3)
> dist <- list(a="gaussian", b="gaussian", c="gaussian")     
> colnames(dag) <- rownames(dag) <- names(dist)
>                           
> essentialGraph(dag)
  a b c
a 0 1 1
b 0 0 1
c 0 1 0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("essentialGraph", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("fitabn")
> ### * fitabn
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: fitabn
> ### Title: Fit an additive Bayesian network model
> ### Aliases: fitabn
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> ## Built-in dataset with a subset of cols  
> mydat <- ex0.dag.data[,c("b1","b2","b3","g1","b4","p2","p4")] 
> 
> 
> ## setup distribution list for each node
> mydists <- list(b1="binomial", b2="binomial", b3="binomial", g1="gaussian",
+               b4="binomial", p2="poisson", p4="poisson")
> 
> ## Null model - all independent variables
> mydag.empty <- matrix(0, nrow=7, ncol=7)
> colnames(mydag.empty) <- rownames(mydag.empty) <- names(mydat)
> 
> ## Now fit the model to calculate its goodness-of-fit
> myres <- fitabn(dag.m = mydag.empty, data.df = mydat, data.dists = mydists)
> 
> ## Log-marginal likelihood goodness-of-fit for complete DAG
> print(myres$mlik) 
[1] -2855.45
> 
> ## Now repeat but include some dependencies first
> mydag <- mydag.empty 
> mydag["b1","b2"] <- 1 # b1<-b2 
> mydag["b2","p4"] <- 1 # b2<-p4
> mydag["b2","g1"] <- 1 # b2<-g1
> mydag["g1","p2"] <- 1 # g1<-p2
> mydag["b3","g1"] <- 1 # b3<-g1
> mydag["b4","b1"] <- 1 # b4<-b1
> mydag["p4","g1"] <- 1 # p4<-g1
> 
> # fit  using the formula statement 
> myres <- fitabn(dag.m = ~b1|b2+b2|p4+g1+g1|p2+b3|g1+b4|b1+p4|g1,
+                 data.df = mydat, data.dists = mydists)
> 
> ## Or equivalentelly using the formula statement
> # myres <- fitabn(dag.m = mydag, data.df = mydat, data.dists = mydists)
> 
> print(myres$mlik) ## a much weaker fit than full independence DAG
[1] -2891.963
> 
> ## Now also create the graph of the DAG via Rgraphviz 
> myres <- fitabn(dag.m = mydag,data.df = mydat, data.dists = mydists,
+                   create.graph = TRUE)
> plotabn(dag.m = mydag, data.dists = mydists, fitted.values.abn = myres$modes)
> 
> ## A simple plot of some posterior densities the algorithm which chooses 
> ## density points is very simple any may be rather sparse so also recompute 
> ## the density over an equally spaced grid of 100 points between the two 
> ## end points which had at f=min.pdf
> ## max.mode.error = 0 foces to use the internal c code
> myres.c <- fitabn(dag.m = mydag, data.df = mydat, data.dists = mydists, 
+                   compute.fixed = TRUE, n.grid = 100, max.mode.error = 0)
> 
> print(names(myres.c$marginals)) ## gives all the different parameter names
[1] "b1" "b2" "b3" "g1" "b4" "p2" "p4"
> 
> ## Repeat but use INLA for the numerics using max.mode.error=100
> ## as using internal code is the default here rather than INLA 
> myres.inla <- fitabn(dag.m = mydag, data.df = mydat, data.dists = mydists,
+                      compute.fixed = TRUE, n.grid = 100, max.mode.error = 100)
> 
> ## Plot posterior densities
> par(mfrow=c(2,2), mai=c(.7,.7,.2,.1))
> plot(myres.c$marginals$b1[["b1|(Intercept)"]], type="l", xlab="b1|(Intercept)")
> lines(myres.inla$marginals$b1[["b1|(Intercept)"]], col="blue")
> plot(myres.c$marginals$b2[["b2|p4"]], type="l", xlab="b2|p4")
> lines(myres.inla$marginals$b2[["b2|p4"]], col="blue")
> plot(myres.c$marginals$g1[["g1|precision"]], type="l", xlab="g1|precision")
> lines(myres.inla$marginals$g1[["g1|precision"]], col="blue")
> plot(myres.c$marginals$b4[["b4|b1"]], type="l", xlab="b4|b1")
> lines(myres.inla$marginals$b4[["b4|b1"]], col="blue")
> 
> ## An elementary mixed model example using built-in data specify DAG, 
> ## only two variables using a subset of variables from ex3.dag.data
> ## both variables are assumed to need (separate) adjustment for the 
> ## group variable, i.e., a binomial GLMM at each node
> 
> 
> mydists <- list(b1="binomial",  b2="binomial")
> 
> ## Compute marginal likelihood - use internal code via max.mode.error=0
> ## as using INLA is the default here.
> ## Model where b1 <- b2
> myres.c <- fitabn(dag.m = ~b1|b2, data.df = ex3.dag.data[,c(1,2,14)], data.dists = mydists,
+                   group.var = "group", cor.vars = c("b1","b2"),
+                   max.mode.error=0)
> print(myres.c) ## show all the output 
The ABN model was fitted using a Bayesian approach. The estimated modes are:

$b1
    b1|(Intercept)              b1|b2 b1|group.precision 
             0.461             -1.560              0.567 

$b2
    b2|(Intercept) b2|group.precision 
             0.110              0.697 

Number of nodes in the network: 2 .
> 
> ## compare modes for node b1 with glmer()
> require(MASS)
> require(lme4)
> 
> m1 <- glmer(b1 ~ 1 + b2 + (1|group), 
+             family = "binomial", data = ex3.dag.data[,c(1,2,14)])
> 
> print(myres.c$modes$b1) ## almost identical to lme4 n.b. glmer() gives variance
    b1|(Intercept)              b1|b2 b1|group.precision 
         0.4605674         -1.5595999          0.5669745 
> ##                         fitabn gives precision=1/variance
> 
> ## Compare with INLA estimate
> myres.inla <- fitabn(dag.m = ~b1|b2,data.df=ex3.dag.data[,c(1,2,14)],
+                      data.dists = mydists, group.var = "group", cor.vars = c("b1","b2"),
+                      compute.fixed = FALSE, max.mode.error = 100)
> 
> ## Compare log marginal likelihoods for each node and total DAG:
> cbind(INLA = unlist(myres.inla[1:3]), C = unlist(myres.c[1:3]), 
+              Delta = unlist(myres.inla[1:3]) - unlist(myres.c[1:3]))
                                    INLA            C Delta
b1                          -612.5001995 -612.5001995     0
b2                          -650.8202412 -650.8202412     0
modes.b1.b1|(Intercept)        0.4605674    0.4605674     0
modes.b1.b1|b2                -1.5595999   -1.5595999     0
modes.b1.b1|group.precision    0.5669745    0.5669745     0
modes.b2.b2|(Intercept)        0.1095588    0.1095588     0
modes.b2.b2|group.precision    0.6968622    0.6968622     0
> 
> ## Now for marginals - INLA is strongly preferable for estimating marginals for nodes 
> ## with random effects as it is far faster, but may not be reliable
> ## see http://r-bayesian-networks.org
> 
> ## INLA's estimates of the marginals, using high n.grid=500
> ## as this makes the plots smoother - see below.
> ## myres.inla <- fitabn(dag.m = ~b1|b2, data.df = ex3.dag.data[,c(1,2,14)], 
> #                      data.dists = mydists,
> #                      group.var = "group", cor.vars = c("b1", "b2"),
> #                      compute.fixed = TRUE, n.grid = 500, 
> #                      control = list(max.mode.error = 100, max.hessian.error = 10E-02))
> 
> ## this is NOT recommended - marginal density estimation using fitabn in mixed models
> ## is really just for diagnostic purposes, better to use fitabn.inla() here
> ## but here goes...be patient
> # myres.c <- fitabn(dag.m = ~b1|b2, data.df = ex3.dag.data[,c(1,2,14)], data.dists = mydists,
> #                   group.var = "group", cor.vars=c("b1", "b2"), compute.fixed = TRUE,
> #                   control = list(max.mode.error = 0, max.hessian.error = 10E-02))
> 
> ## compare marginals between internal and INLA.   
> # par(mfrow=c(2,3))
> ## 5 parameters - two intercepts, one slope, two group level precisions
> # plot(myres.inla$marginals$b1[[1]], type="l", col="blue")
> # lines(myres.c$marginals$b1[[1]], col="brown", lwd=2)
> # plot(myres.inla$marginals$b1[[2]], type="l", col="blue")
> # lines(myres.c$marginals$b1[[2]], col="brown", lwd=2)
> ## the precision of group-level random effects
> # plot(myres.inla$marginals$b1[[3]],type="l", col="blue", xlim=c(0,2))
> # lines(myres.c$marginals$b1[[3]],col="brown",lwd=2)
> # plot(myres.inla$marginals$b2[[1]],type="l", col="blue")
> # lines(myres.c$marginals$b2[[1]],col="brown",lwd=2)
> # plot(myres.inla$marginals$b2[[1]], type="l", col="blue")
> # lines(myres.c$marginals$b2[[1]], col="brown", lwd=2)
> ## the precision of group-level random effects
> # plot(myres.inla$marginals$b2[[2]], type="l", col="blue", xlim=c(0,2))
> # lines(myres.c$marginals$b2[[2]], col="brown", lwd=2)
> 
> ### these are very similar although not exactly identical
> 
> ## use internal code but only to compute a single parameter over a specified grid
> ## This can be necessary if the simple auto grid finding functions does a poor job
> 
> #myres.c <- fitabn(dag.m = ~b1|b2, data.df = ex3.dag.data[,c(1,2,14)], data.dists = mydists,
> #                  group.var = "group", cor.vars = c("b1", "b2"), 
> #                  centre = FALSE, compute.fixed = TRUE,
> #                  marginal.node = 1, marginal.param = 3,## precision term in node 1
> #                  variate.vec = seq(0.05, 1.5, len=25), max.hessian.error = 10E-02)
> 
> #par(mfrow=c(1,2))
> #plot(myres.c$marginals[[1]], type="l", col="blue")## still fairly sparse
> ## An easy way is to use spline to fill in the density without recomputing other
> ## points provided the original grid is not too sparse.
> #plot(spline(myres.c$marginals[[1]], n=100), type="b", col="brown")
> 
> ## -----------------------------------------------------------------------------------
> ## This function contains an MLE implementation accessible through a method parameter
> ## use built-in simulated data set
> ## -----------------------------------------------------------------------------------
> 
> mydat <- ex0.dag.data[,c("b1","b2","b3","g1","b4","p2","p4")] ## take a subset of cols
> 
> ## setup distribution list for each node
> mydists <- list(b1="binomial", b2="binomial", b3="binomial",
+                 g1="gaussian", b4="binomial", p2="poisson", p4="poisson")
> 
> 
> ## now fit the model to calculate its goodness of fit
> myres.mle <- fitabn(dag.m = ~b1|b2+b2|p4+g1+g1|p2+b3|g1+b4|b1+p4|g1, 
+                     data.df = mydat, data.dists = mydists, method = "mle")
> 
> myres.bayes <- fitabn(dag.m = ~b1|b2+b2|p4+g1+g1|p2+b3|g1+b4|b1+p4|g1, 
+                       data.df = mydat, data.dists = mydists, method = "bayes")
> 
> ## print the output
> ## MLE
> print(myres.mle)
The ABN model was fitted using an mle approach. The estimated coefficients are:

$b1
     b1|intercept     b2
[1,]         0.11 0.0465

$b2
     b2|intercept     p4
[1,]       -0.252 0.0301

$b3
     b3|intercept     g1
[1,]       0.0267 0.0319

$g1
     g1|intercept      p2
[1,]      -0.0435 0.00421

$b4
     b4|intercept     b1
[1,]        0.114 0.0863

$p2
     p2|intercept
[1,]         2.34

$p4
     p4|intercept      g1
[1,]         2.32 0.00941

Number of nodes in the network: 7 .
> 
> #Bayes
> print(myres.bayes)
The ABN model was fitted using a Bayesian approach. The estimated modes are:

$b1
b1|(Intercept)          b1|b2 
        0.1097         0.0465 

$b2
b2|(Intercept)          b2|p4 
       -0.2519         0.0301 

$b3
b3|(Intercept)          b3|g1 
        0.0267         0.0319 

$g1
g1|(Intercept)          g1|p2   g1|precision 
      -0.04350        0.00421        1.00353 

$b4
b4|(Intercept)          b4|b1 
        0.1144         0.0863 

$p2
p2|(Intercept) 
          2.34 

$p4
p4|(Intercept)          p4|g1 
       2.31644        0.00941 

Number of nodes in the network: 7 .
> 
> ## plot the model with parameter estimates
> plotabn(dag.m = mydag, data.dists = mydists, fitted.values.abn.mle = myres.bayes$modes)
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("fitabn", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("infoDag")
> ### * infoDag
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: infoDag
> ### Title: Compute standard information for a DAG.
> ### Aliases: infoDag
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Creating a dag:
> dag <- matrix(c(0,0,0,0, 1,0,0,0, 1,1,0,1, 0,1,0,0), nrow = 4, ncol = 4)
> dist <- list(a="gaussian", b="gaussian", c="gaussian", d="gaussian")
> colnames(dag) <- rownames(dag) <- names(dist)
>     
> infoDag(dag)
$n.nodes
[1] 4

$n.arcs
[1] 5

$mb.average
[1] 3

$nh.average
[1] 2.5

$parent.average
[1] 1.25

$children.average
[1] 1.25

> 
> 
> plot(create_abnDag(dag))
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("infoDag", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("link_strength")
> ### * link_strength
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: linkStrength
> ### Title: A function that returns the strengths of the edge connections in
> ###   a Bayesian Network learned from observational data.
> ### Aliases: linkStrength link.strength linkstrength
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> dist <- list(a="gaussian", b="gaussian", c="gaussian")
> data.param <- matrix(c(0,1,0, 0,0,1, 0,0,0), nrow = 3L, ncol = 3L, byrow = TRUE)
>     
> data.param.var <- matrix(0, nrow = 3L, ncol = 3L)
> diag(data.param.var) <- c(0.1,0.1,0.1)
>     
> out <- simulateAbn(data.dists = dist,
+     n.chains = 1, n.adapt = 1000, n.thin = 1, n.iter = 100,
+     data.param = data.param, data.param.var = data.param.var)
Creation of the BUG file: model.bug
BUG file created
Compiling model graph
   Resolving undeclared variables
   Allocating nodes
Graph information:
   Observed stochastic nodes: 0
   Unobserved stochastic nodes: 3
   Total graph size: 10

Initializing model

> 
> linkStrength(data.param, data.df = out, data.dists = dist,
+              method = "ls", discretization.method = "sturges")
     [,1]     [,2]     [,3]
[1,]    0 5.166889 0.000000
[2,]    0 0.000000 5.167048
[3,]    0 0.000000 0.000000
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("link_strength", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mb")
> ### * mb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mb
> ### Title: Compute the Markov blanket
> ### Aliases: mb
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Defining distribution and dag
> dist <- list(a="gaussian", b="gaussian", c="gaussian", d="gaussian", e="binomial", 
+                f="binomial")
> dag <- matrix(c(0,1,1,0,1,0,
+     0,0,1,1,0,1, 
+     0,0,0,0,0,0, 
+     0,0,0,0,0,0, 
+     0,0,0,0,0,1, 
+     0,0,0,0,0,0), nrow = 6L, ncol = 6L, byrow = TRUE)
>     
> colnames(dag) <- rownames(dag) <- names(dist)
>     
> mb(dag, node = "b", data.dists = dist)
[1] "a" "c" "d" "f" "e"
> mb(dag, node = "e", data.dists = dist)
[1] "a" "f" "b" "c"
> mb(dag, node = c("b","e"), data.dists = dist)
[1] "a" "c" "d" "f" "e" "b"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("miData")
> ### * miData
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: miData
> ### Title: Empirical Estimation of the Entropy from a Table of Counts
> ### Aliases: miData
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Generate random variable
> Y <- rnorm(n = 100, mean = 0, sd = 2)
> X <- rnorm(n = 100, mean = 5, sd = 2)
> 
> dist <- list(Y="gaussian", X="gaussian")
> 
> miData(discretization(data.df = cbind(X,Y), data.dists = dist,
+                 discretization.method = "fd", nb.states = FALSE),
+        method = "mi.raw")
[1] 0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("miData", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mostprobable")
> ### * mostprobable
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mostprobable
> ### Title: Find most probable DAG structure
> ### Aliases: mostprobable
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> ##############################
> ## Example 1
> ##############################
> ## Use a subset of a built-in simulated data set
> mydat <- ex0.dag.data[,c("b1","b2","g1","g2","p1","p2")]
> 
> ## Setup distribution list for each node
> mydists <- list(b1="binomial", b2="binomial",
+               g1="gaussian", g2="gaussian",
+               p1="poisson", p2="poisson")
> 
> ## Parent limits
> max.par <- list("b1"=1, "b2"=1, "g1"=1, "g2"=0, "p1"=1, "p2"=2)
> 
> ## Now build cache with structural constrains:
> ##   now ban arc from b2 to b1 
> ##   always retain arc from g2 to g1
> 
> mycache <- buildscorecache(data.df=mydat, data.dists=mydists,
+                      dag.banned= ~b1|b2, dag.retained= ~g1|g2, max.parents=max.par)
> 
> ## Now find the globally best DAG
> mp.dag <- mostprobable(score.cache=mycache)
Step1. completed max alpha_i(S) for all i and S
Total sets g(S) to be evaluated over: 64
> 
> ## Get the corresponding best goodness-of-fit network score
> fitabn(object = mp.dag)$mlik
[1] -2882.415
> 
> ##############################
> ## Example 2
> ##############################
> 
> ## this data comes with abn see ?ex1.dag.data
> mydat <- ex1.dag.data 
> 
> ## setup distribution list for each node
> mydists <- list(b1="binomial", p1="poisson", g1="gaussian", b2="binomial",
+               p2="poisson", b3="binomial", g2="gaussian", b4="binomial",
+               b5="binomial", g3="gaussian")
> 
> ## assum no constraints in ban nor retain
> 
> ## parent limits
> max.par <- list("b1"=4,"p1"=4,"g1"=4,"b2"=4,"p2"=4,"b3"=4,"g2"=4,"b4"=4,"b5"=4,"g3"=4)
> ## now build cache
> mycache <- buildscorecache(data.df = mydat, data.dists = mydists, max.parents = max.par)
> 
> ## Find the globally best DAG
> mp.dag <- mostprobable(score.cache=mycache)
Step1. completed max alpha_i(S) for all i and S
Total sets g(S) to be evaluated over: 1024
> fitabn(object=mp.dag)$mlik
[1] -78685.32
> 
> ## plot the best model
> myres <- fitabn(object=mp.dag,create.graph=TRUE)
> 
> plotabn(dag.m = mp.dag$dag, data.dists = mydists)#, fitted.values.abn = myres)
> 
> ## fit the known true DAG
> true.dag <- matrix(data=0,ncol=10, nrow = 10)
> colnames(true.dag) <- rownames(true.dag) <- names(mydists)
> 
> true.dag["p2",c("b1","p1")] <- 1
> true.dag["b3",c("b1","g1","b2")] <- 1
> true.dag["g2",c("p1","g1","b2")] <- 1
> true.dag["b4",c("g1","p2")] <- 1
> true.dag["b5",c("g1","g2")] <- 1
> true.dag["g3",c("g1","b2")] <- 1
> 
> fitabn(dag.m = true.dag, data.df = mydat, data.dists=mydists)$mlik
[1] -78685.32
> 
> #################################################################
> ## Example 3 - models with random effects
> #################################################################
> 
> ## this data comes with abn see ?ex3.dag.data
> # mydat <- ex3.dag.data[,c(1:4,14)] 
> 
> # mydists <- list(b1="binomial", b2="binomial", b3="binomial",
> #              b4="binomial")
> 
> ## This takes a few seconds
> # mycache.mixed <- buildscorecache(data.df = mydat, data.dists = mydists,
> #               group.var = "group", cor.vars = c("b1","b2","b3","b4"),
> #               max.parents=2, which.nodes=c(1:4))
> 
> ## find the most probable DAG
> # mp.dag <- mostprobable(score.cache=mycache.mixed)
> 
> ## get goodness of fit
> # fitabn(object = mp.dag, data.df = mydat, data.dists = mydists,
> #      group.var = "group", cor.vars = c("b1","b2","b3","b4"))$mlik
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mostprobable", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot-abn")
> ### * plot-abn
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plotabn
> ### Title: Plot an ABN graphic
> ### Aliases: plotabn
> ### Keywords: models hplot
> 
> ### ** Examples
> 
> #Define distribution list
> dist <- list(a="gaussian", b="gaussian", c="gaussian", d="gaussian", e="binomial", f="binomial")
> 
> #Define a matrix formulation
> arc.strength <- matrix(c(0,0.5,0.5,0.7,0.1,0,
+                               0,0,0.3,0.1,0,0.8,
+                               0,0,0,0.35,0.66,0,
+                               0,0,0,0,0.9,0,
+                               0,0,0,0,0,0.8,
+                               0,0,0,0,0,0),nrow = 6L, ncol = 6L, byrow = TRUE)
> 
> #Naming of the matrix
> colnames(arc.strength) <- rownames(arc.strength) <- names(dist)
> 
> #Plot from a formula
> plotabn(dag.m = ~a|b:c:e+b|c:d:f+e|f, data.dist = dist)
> 
> #Plot form a matrix
> plotabn(dag.m = arc.strength, data.dist = dist)
> 
> #Creating adjency matrix
> plotabn(dag.m = ~a|b:c:e+b|c:d:f+e|f, data.dist = dist, plot = FALSE)
  a b c d e f
a 0 1 1 0 1 0
b 0 0 1 1 0 1
c 0 0 0 0 0 0
d 0 0 0 0 0 0
e 0 0 0 0 0 1
f 0 0 0 0 0 0
> 
> #Arc strength
> plotabn(dag.m = ~a|b:c:e+b|c:d:f+e|f, data.dist = dist, arc.strength = arc.strength)
> 
> #Markov blanket
> plotabn(dag.m = ~a|b:c:e+b|c:d:f+e|f, data.dists = dist, markov.blanket.node = "e")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot-abn", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("scoreContribution")
> ### * scoreContribution
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: scoreContribution
> ### Title: Compute the score's contribution in a network of each
> ###   observation.
> ### Aliases: scoreContribution
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> ## Use a subset of a built-in simulated data set
> mydat <- ex1.dag.data[,c("b1","g1","p1")]
> 
> ## setup distribution list for each node
> mydists <- list(b1="binomial", g1="gaussian", p1="poisson")
> 
> ## now build cache
> mycache <- buildscorecache(data.df = mydat, data.dists = mydists, max.parents = 2, method = "mle")
> 
> ## Find the globally best DAG
> mp.dag <- mostprobable(score.cache=mycache, score="bic", verbose = FALSE)
> 
> out <- scoreContribution(object = mp.dag)
> 
> ## Observations contribution per network node
> boxplot(out$bic)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("scoreContribution", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("search_heuristic")
> ### * search_heuristic
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: searchHeuristic
> ### Title: A family of heuristic algorithms that aims at finding high
> ###   scoring directed acyclic graphs
> ### Aliases: search.heuristic searchHeuristic
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> 
> ##############################################
> ## example: use built-in simulated data set
> ##############################################
> 
> mydat <- ex1.dag.data ## this data comes with abn see ?ex1.dag.data
> 
> ## setup distribution list for each node
> mydists<-list(b1="binomial", p1="poisson", g1="gaussian", b2="binomial", 
+               p2="poisson", b3="binomial", g2="gaussian", b4="binomial",
+               b5="binomial", g3="gaussian")
> 
> mycache <- buildscorecache(data.df = mydat, data.dists = mydists, max.parents = 2)
> 
> ## Now peform 100 greedy searches
> heur.res <- searchHeuristic(score.cache = mycache, data.dists = mydists,
+               start.dag = "random", num.searches = 10,
+               max.steps = 50)
> 
> ## Plot (one) dag
> plotabn(heur.res$dags[[1]], data.dists = mydists)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("search_heuristic", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("search_hillclimber")
> ### * search_hillclimber
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: searchHillclimber
> ### Title: Find high scoring directed acyclic graphs using heuristic
> ###   search.
> ### Aliases: search.hillclimber searchHillclimber
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> ##############################################
> ## example 1: use built-in simulated data set
> ##############################################
> 
> ## this data comes with abn see ?ex1.dag.data
> mydat <- ex1.dag.data 
> 
> ## setup distribution list for each node
> mydists <- list(b1="binomial", p1="poisson", g1="gaussian", b2="binomial",
+               p2="poisson", b3="binomial", g2="gaussian", b4="binomial",
+               b5="binomial", g3="gaussian")
> 
> ## Build cache may take some minutes for buildscorecache() 
> mycache <- buildscorecache(data.df = mydat, data.dists = mydists, 
+                            max.parents = 2);
> 
> # now peform 100 greedy searches
> heur.res <- searchHillclimber(score.cache = mycache,
+                  num.searches = 100, timing.on = FALSE)
> plotabn(dag.m = heur.res$consensus, data.dists = mydists)
> 
> ###########################
> ## example 2 - glmm example
> ###########################
> 
> ## this data comes with abn see ?ex1.dag.data
> mydat <- ex3.dag.data[,c(1:4,14)] 
> 
> mydists <- list(b1="binomial", b2="binomial", b3="binomial",
+               b4="binomial")
> 
> ## This takes a few seconds
> mycache.mixed <- buildscorecache(data.df = mydat, data.dists = mydists,
+                group.var = "group", cor.vars = c("b1","b2","b3","b4"),
+                max.parents=2, which.nodes=c(1:4))
> 
> ## Now peform 50 greedy searches
> heur.res <- searchHillclimber(score.cache = mycache.mixed, num.searches = 50,
+                               timing.on = FALSE)
> ##  Plot the majority consensus network
> plotabn(dag.m = heur.res$consensus, data.dists = mydists)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("search_hillclimber", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("simulate-abn")
> ### * simulate-abn
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: simulateAbn
> ### Title: Simulate from an ABN Network
> ### Aliases: simulateAbn simulate.abn simulateabn
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Define set of distributions:
> dist<-list(a="gaussian", b="gaussian", c="gaussian", d="gaussian", 
+            e="binomial", f="binomial")
> 
> ## Define parameter matrix:
> data.param <- matrix(c(1,2,0.5,0,20,0,
+                        0,1,3,10,0, 0.8,
+                        0,0,1,0,0,0,
+                        0,0,0,1,0,0,
+                        0,0,0,0,0.5,1,
+                        0,0,0,0,0,0), nrow = 6L, ncol = 6L, byrow = TRUE)
> 
> ## Define precision matrix: 
> data.param.var <- matrix(0, nrow = 6L, ncol = 6L)
> diag(data.param.var) <- c(10,20,30,40,0,0)
> 
> ## Plot the dag
> plotabn(dag.m = ~a|b:c:e+b|c:d:f+e|f, data.dists = dist, plot = FALSE)
  a b c d e f
a 0 1 1 0 1 0
b 0 0 1 1 0 1
c 0 0 0 0 0 0
d 0 0 0 0 0 0
e 0 0 0 0 0 1
f 0 0 0 0 0 0
> 
> ## Simulate the data
> simulateAbn(data.dists=dist, n.chains=1, n.thin=1, n.iter=1000,
+             data.param=data.param, data.param.var=data.param.var)
Creation of the BUG file: model.bug
BUG file created
Compiling model graph
   Resolving undeclared variables
   Allocating nodes
Graph information:
   Observed stochastic nodes: 0
   Unobserved stochastic nodes: 6
   Total graph size: 28

Initializing model

            a         b         c         d e f
1    31.50648 14.821411 1.0991226 1.0539977 0 0
2    54.65933 16.500035 1.1834550 1.1204982 1 1
3    29.08525 13.849187 0.9342063 1.0435079 0 0
4    57.57673 18.076941 0.9486658 1.3534655 1 1
5    27.56188 12.952132 1.1041725 0.8089732 0 0
6    28.82666 13.765445 0.6719193 1.0086372 0 1
7    48.05680 13.142441 0.9254646 0.8540409 1 1
8    46.16526 12.491463 0.9009505 0.7904891 1 1
9    30.19885 14.681070 0.7824115 1.1144347 0 0
10   53.67121 16.280198 1.1225112 1.1841594 1 0
11   28.79813 13.741627 1.0964363 0.9348754 0 0
12   30.75595 14.508009 0.7953884 1.1100618 0 0
13   54.70617 16.719427 1.2617489 1.1066196 1 1
14   51.99066 15.248643 1.2198559 1.0964883 1 0
15   47.42875 13.225258 0.9130044 0.9571377 1 0
16   49.12922 13.619122 0.8462728 0.9820094 1 0
17   27.74856 13.233040 1.2374796 0.8660829 0 0
18   43.31937 10.701366 0.8349151 0.7260928 1 0
19   28.02676 13.273585 1.1893733 0.8804276 0 0
20   47.34268 12.928091 1.2117547 0.8319034 1 0
21   28.49555 13.700546 0.8109640 1.0614340 0 0
22   41.65810 10.199173 0.8156163 0.6098115 1 1
23   47.67347 13.180149 0.8743823 0.8838353 1 1
24   52.86384 15.793637 0.9724450 1.0928846 1 1
25   48.23324 13.437130 1.1382232 0.9003252 1 0
26   49.28204 14.117836 0.6940448 0.9585970 1 1
27   55.21085 16.720481 0.8960426 1.2497052 1 1
28   50.09079 14.495803 0.7555502 0.9971181 1 1
29   51.06364 14.820558 0.8604719 1.0354882 1 1
30   27.93326 13.186554 0.7735603 0.9581430 0 0
31   31.55713 14.955011 1.0513628 1.0762672 0 0
32   49.11737 13.784432 0.7764441 0.9654650 1 1
33   47.28804 13.059586 0.9701032 0.9038472 1 0
34   32.81918 15.723071 1.1257766 1.1037640 0 0
35   52.12616 15.272912 1.3114926 0.9867261 1 1
36   48.22248 13.564327 1.2010522 0.8924328 1 0
37   49.27660 13.783266 1.1240282 0.9903500 1 0
38   29.69160 14.193859 0.7507678 1.0358887 0 1
39   45.88416 11.977057 1.1239497 0.8010170 1 0
40   46.67140 12.555573 1.0301002 0.8417453 1 0
41   25.90497 12.128353 0.7395973 0.8012251 0 1
42   50.59659 14.410146 0.9251738 0.9891963 1 1
43   49.89196 14.488483 0.9551321 0.9863798 1 1
44   47.19756 12.973003 1.1306733 0.8624140 1 0
45   29.10098 13.783154 0.9354789 0.9935417 0 0
46   52.31487 15.379423 1.1590247 1.0122058 1 1
47   44.48083 11.580797 0.8866842 0.7104468 1 1
48   47.45982 13.219685 0.8242858 0.9785889 1 0
49   57.61737 18.066745 1.0284071 1.2970942 1 1
50   53.16725 15.941654 1.2195193 1.0693669 1 1
51   54.66032 16.611612 0.9032040 1.2705990 1 0
52   50.46340 14.486498 0.7016325 1.0570955 1 1
53   22.68646 10.730492 0.7283091 0.7480154 0 0
54   28.46566 13.689848 0.6791708 1.0783915 0 0
55   46.44541 12.369318 0.8851836 0.8113297 1 0
56   28.72792 13.637087 0.7725295 1.0311058 0 0
57   52.55195 15.466043 0.8491682 1.1084366 1 1
58   32.76776 15.651032 0.9491345 1.0944335 0 1
59   49.20524 14.003108 1.1174912 0.9037159 1 1
60   28.58452 13.304818 1.2745438 0.8743331 0 0
61   26.14841 12.555664 0.6544466 0.9718351 0 0
62   52.24767 15.289676 1.0060729 1.0442871 1 1
63   44.84541 11.849961 0.6931335 0.8206308 1 1
64   36.78777 17.493347 1.0807597 1.2810439 0 1
65   55.56602 16.901801 0.9026228 1.2921210 1 0
66   53.57070 15.850817 0.9962088 1.2029630 1 0
67   53.83082 16.158726 1.0827633 1.2210364 1 0
68   48.41055 13.396240 1.1174930 0.9075299 1 0
69   31.69197 15.259627 1.0230789 1.0903371 0 0
70   27.53325 13.113686 1.3262162 0.8297619 0 0
71   50.45477 14.303814 1.0527516 0.9455050 1 1
72   47.97673 13.341488 0.8242187 1.0053100 1 0
73   35.53484 17.012542 1.1470979 1.2820499 0 0
74   48.37592 13.419029 1.1464639 0.8288694 1 1
75   51.08859 14.915755 0.9333272 1.0254222 1 1
76   50.71544 14.641409 1.1883054 0.9049394 1 1
77   46.41067 12.790451 0.6363287 1.0375379 1 0
78   47.56946 12.931248 1.1080015 0.7820400 1 1
79   49.28091 14.047694 0.7702172 1.0632593 1 0
80   50.88579 14.305021 0.8391395 1.0572897 1 0
81   50.67348 14.616810 0.8744776 1.0096253 1 1
82   50.76999 14.417981 1.1878267 0.9575537 1 0
83   25.27154 11.845006 0.9755449 0.7823822 0 0
84   49.41292 14.094003 1.1995766 0.9118617 1 1
85   25.74546 12.263132 0.8909273 0.8713446 0 0
86   57.05067 17.648338 0.8075143 1.3611330 1 1
87   27.68310 13.130699 0.7377777 0.9884841 0 0
88   51.63347 15.162245 0.8892504 1.0843106 1 1
89   53.35163 15.829659 1.2054187 1.0205635 1 1
90   49.09746 13.906468 0.7051496 0.9950415 1 1
91   43.07721 10.987458 0.8830860 0.7372017 1 0
92   50.65496 14.584908 1.0738917 0.9192239 1 1
93   46.05377 12.359413 0.8229080 0.8961706 1 0
94   46.87301 12.754791 1.0202353 0.8525699 1 0
95   51.53025 15.220528 1.0411483 1.0195155 1 1
96   50.58942 14.557360 1.0162792 0.9606943 1 1
97   28.25899 13.405766 1.1575634 0.8718317 0 0
98   27.07385 12.651383 0.7355563 0.9419305 0 0
99   44.69688 11.566086 0.9180074 0.7758968 1 0
100  46.93135 12.848725 1.1360921 0.8321911 1 0
101  53.36880 15.948319 0.9895078 1.1831259 1 0
102  50.20184 14.446536 1.0419336 0.9513866 1 1
103  28.18517 13.075991 1.2167137 0.8318547 0 0
104  30.15477 14.376369 0.9761980 0.9670479 0 1
105  30.54003 14.636829 0.8074641 1.1330810 0 0
106  46.98222 12.676743 0.9828653 0.7815180 1 1
107  46.11074 12.013894 0.8284596 0.7741972 1 1
108  46.05212 12.495563 0.7485251 0.8416049 1 1
109  27.46750 13.085036 0.7726215 1.0245337 0 0
110  30.23815 14.518427 1.1444115 0.9922363 0 0
111  24.31180 11.388333 1.1641759 0.6951901 0 0
112  32.57774 15.569973 0.9818228 1.1422707 0 0
113  52.63919 15.344661 1.1354041 0.9969717 1 1
114  33.23646 15.859518 0.7120329 1.1583516 0 1
115  52.10768 15.092321 1.0921974 0.9842837 1 1
116  53.53039 16.062809 0.7709123 1.2046985 1 1
117  35.05431 16.566639 1.0159198 1.1702284 0 1
118  49.10788 13.857686 0.8747728 1.0004926 1 0
119  51.82181 15.036562 0.8304407 1.0900465 1 1
120  45.97552 12.254370 0.8818407 0.7791060 1 1
121  55.29558 16.696974 0.8484131 1.3128731 1 0
122  46.65723 12.723296 0.8519876 0.9283161 1 0
123  48.83349 13.363013 0.9690961 0.9142054 1 0
124  52.58149 15.457656 1.2053418 1.0379368 1 1
125  52.48565 15.322766 1.1409620 1.1176074 1 0
126  46.04788 12.332520 0.9451341 0.7924700 1 1
127  27.15461 12.721662 1.1748590 0.8509229 0 0
128  48.47509 13.164609 0.8516054 0.9887820 1 0
129  51.03778 14.704185 0.9272315 1.0336900 1 1
130  46.32770 12.559426 0.7724748 0.8398158 1 1
131  44.81946 11.773961 1.0383656 0.7866511 1 0
132  48.26793 13.428292 0.9538464 0.8625209 1 1
133  32.82302 15.616469 0.8040628 1.1835324 0 0
134  30.14433 14.312087 1.1059576 1.0261662 0 0
135  52.02201 15.028767 1.2278766 1.0058173 1 0
136  48.23948 13.533258 0.7953308 0.9202601 1 1
137  25.74931 12.028614 0.8814010 0.8334743 0 0
138  53.92266 16.273674 1.1389054 1.0959831 1 1
139  50.98942 14.706846 1.0115520 1.0779710 1 0
140  26.11448 12.265970 1.0065043 0.8271372 0 0
141  44.74541 11.586750 0.8784613 0.8017631 1 0
142  48.84525 13.525836 1.0926794 0.8534329 1 1
143  31.25107 15.094338 1.0194013 1.0939234 0 0
144  27.22195 12.686880 0.8957436 0.8950794 0 0
145  49.70690 14.030059 1.1861523 0.9683978 1 0
146  31.33870 14.831790 0.9461152 1.0130024 0 1
147  27.97549 12.864935 1.1173249 0.7925769 0 1
148  50.16718 14.453407 0.9388405 0.9968641 1 1
149  44.55136 11.375772 1.0617027 0.7599767 1 0
150  27.07590 12.830138 1.0890532 0.9115686 0 0
151  36.03250 17.171270 1.0150967 1.2186674 0 1
152  43.35666 11.050352 0.8120541 0.7752880 1 0
153  50.82215 14.769920 1.0870066 1.0765085 1 0
154  28.89639 13.801138 0.9540810 0.9032195 0 1
155  55.05280 16.857352 1.2169954 1.1943490 1 0
156  44.89163 11.893413 0.7274949 0.8766148 1 0
157  51.22252 14.942525 1.2781334 1.0404259 1 0
158  52.22669 15.428811 0.7951887 1.1169624 1 1
159  48.86924 13.734890 0.7044058 1.0492414 1 0
160  55.96791 17.360822 1.0895011 1.1905053 1 1
161  51.56975 14.940091 1.1321337 1.0564902 1 0
162  27.10969 13.013112 1.0497609 0.8744688 0 0
163  24.67313 11.827478 0.7205172 0.8774927 0 0
164  46.36228 12.405068 1.0118845 0.8083541 1 0
165  50.46777 14.348463 1.0854795 0.9197723 1 1
166  24.39809 11.242194 1.1481770 0.6138868 0 1
167  50.60416 14.638546 0.9056599 1.0052280 1 1
168  57.05101 17.699689 1.1095113 1.2609155 1 1
169  32.22580 14.884442 1.3425777 0.9315049 0 1
170  48.70781 13.697061 0.6482296 1.0723078 1 0
171  50.37722 14.440795 1.3254362 0.9460886 1 0
172  33.04451 15.363858 1.0925729 1.1260236 0 0
173  35.70517 16.984267 1.1637829 1.2404951 0 0
174  37.33052 17.640454 1.2513245 1.1875395 0 1
175  54.62551 16.508664 0.8830169 1.1884027 1 1
176  43.89375 11.237887 0.9505286 0.6962661 1 1
177  55.45294 16.899155 0.9698005 1.2343697 1 1
178  53.07000 15.594812 1.3702277 0.9774229 1 1
179  32.29310 15.394287 1.1121212 1.0168834 0 1
180  30.12494 14.336449 1.0385514 1.0117298 0 0
181  47.52309 13.115307 0.8707231 0.9194218 1 0
182  50.70808 14.498025 1.0601404 0.9496861 1 1
183  33.61821 16.127431 0.9069121 1.2477369 0 0
184  53.47077 15.956155 0.7343743 1.2025113 1 1
185  54.58936 16.311097 1.1568670 1.0756345 1 1
186  50.10916 14.096418 1.0609051 0.8774005 1 1
187  52.82416 15.928342 0.7518294 1.2875336 1 0
188  24.99519 11.873727 0.7717947 0.8403226 0 0
189  56.89703 17.492447 0.9835074 1.2954499 1 1
190  52.95406 16.101009 0.7457093 1.2387875 1 1
191  48.59626 13.226679 1.0895294 0.8577227 1 0
192  52.67829 15.631111 0.9920067 1.0520989 1 1
193  51.18531 14.704375 0.8813206 1.0936537 1 0
194  55.77536 17.183696 1.2978791 1.1420142 1 1
195  45.61064 12.348112 0.7800266 0.9081956 1 0
196  49.49028 13.959290 1.0418962 0.9220808 1 1
197  52.81801 15.619298 1.0618570 1.0530662 1 1
198  33.91870 16.061690 1.4049660 1.0990079 0 0
199  48.21344 13.546643 0.8510262 0.9446997 1 1
200  28.73903 13.730491 1.2821063 0.9158666 0 0
201  54.45340 16.621805 0.9342400 1.1730241 1 1
202  46.90445 12.592789 1.0836060 0.7175055 1 1
203  49.80194 14.161649 0.9395062 0.9899496 1 1
204  47.25680 12.695653 1.1362175 0.7488989 1 1
205  48.63818 13.443036 1.2320703 0.7866171 1 1
206  29.61070 13.978941 0.9908249 0.9378358 0 1
207  50.92226 14.668190 0.9431599 1.0109303 1 1
208  31.10877 14.770589 1.1631237 0.9585255 0 1
209  50.39681 14.551925 1.2983416 0.8865018 1 1
210  23.47665 11.152666 1.1213493 0.7041880 0 0
211  46.25981 12.250785 1.2582937 0.7583254 1 0
212  53.81899 16.082725 1.1339568 1.1565232 1 0
213  49.78977 14.144821 1.0985526 0.8854254 1 1
214  35.04982 16.854572 1.4090286 1.1684519 0 0
215  48.72443 13.448713 0.5145244 1.0136843 1 1
216  51.71675 15.202484 0.6179899 1.1801526 1 1
217  29.69341 14.167586 1.1940197 0.9991366 0 0
218  47.73434 12.901963 0.8436812 0.8435781 1 1
219  52.77622 15.420902 1.1634680 1.1120735 1 0
220  53.18370 16.067439 0.8300511 1.2860395 1 0
221  51.48276 15.043990 0.9118232 1.0700102 1 1
222  57.88037 18.019467 1.2590627 1.2042952 1 1
223  32.16039 15.104032 0.9928292 1.0956577 0 0
224  47.77963 12.857291 1.1614330 0.8827231 1 0
225  44.22233 11.598046 0.7760156 0.8155924 1 0
226  32.97444 15.588381 0.9920067 1.1763753 0 0
227  47.15768 12.511773 1.2692472 0.7566545 1 0
228  47.80612 13.143965 1.1647393 0.9100887 1 0
229  50.21194 14.434440 1.1811744 0.8897568 1 1
230  52.32676 15.303586 1.0624131 1.0700168 1 0
231  46.93866 12.756972 0.7930664 0.9052395 1 0
232  48.06536 13.059963 0.9983461 0.8265651 1 1
233  25.12760 11.695958 0.9239980 0.7962804 0 0
234  49.93768 14.285740 1.0142300 1.0047850 1 0
235  53.71891 15.990904 1.0849993 1.1282645 1 1
236  46.62031 12.557665 0.8566597 0.9244279 1 0
237  58.66545 18.541407 1.0598097 1.4651753 1 0
238  33.67842 15.969442 0.9288657 1.1134107 0 1
239  47.03087 12.745867 1.0462255 0.8423707 1 0
240  53.71489 16.250426 1.0240862 1.1148936 1 1
241  32.85948 15.628294 1.0738145 1.0438872 0 1
242  26.37979 12.389831 1.0506466 0.8337898 0 0
243  50.68593 14.447138 1.0645444 0.9549214 1 1
244  57.66095 17.792228 0.8899161 1.3771605 1 1
245  46.71871 12.880599 1.0891501 0.7990423 1 1
246  35.21391 16.900638 0.9351978 1.3214549 0 0
247  45.30103 11.644592 0.7487645 0.8258933 1 0
248  47.06787 12.980775 0.8100542 0.9612122 1 0
249  48.18035 13.253358 1.0037906 0.8244839 1 1
250  33.08494 15.496124 0.9331124 1.1996541 0 0
251  45.78468 12.087654 0.7083563 0.8058927 1 1
252  51.79424 14.908188 1.2589268 0.9523185 1 1
253  45.60416 11.947280 1.1893862 0.7484482 1 0
254  53.55701 15.874732 1.0000774 1.1011195 1 1
255  31.28883 14.902446 0.7749117 1.0888255 0 1
256  50.91353 14.594894 1.1552268 0.9439073 1 1
257  48.82177 13.831845 0.7644867 1.0286529 1 0
258  58.37517 18.529486 1.3684210 1.2587268 1 1
259  48.42224 13.625582 0.8657201 0.9135350 1 1
260  27.74478 13.264758 0.9450063 0.9443919 0 0
261  48.45536 13.590144 0.7430170 0.9993765 1 0
262  47.27476 12.928170 0.8339652 0.8369829 1 1
263  43.64822 11.153638 1.0694101 0.6011361 1 1
264  31.34758 14.706792 1.0240272 0.9690006 0 1
265  26.00301 12.196486 1.0595778 0.8512380 0 0
266  30.28490 14.331266 0.9181380 1.0586100 0 0
267  54.97992 16.388854 1.2231427 1.0846803 1 1
268  29.94244 14.502681 1.0067246 1.0123889 0 0
269  48.43644 14.097358 0.9825858 1.0302177 1 0
270  51.79825 14.995055 1.0993808 0.9708496 1 1
271  55.25785 16.868432 0.8829676 1.2265092 1 1
272  52.95331 15.798123 1.0304608 1.0871148 1 1
273  50.12165 14.290892 0.9562741 0.9707065 1 1
274  25.84488 12.135505 0.8460898 0.8563020 0 0
275  48.18105 13.515865 0.7838874 0.9310308 1 1
276  52.01827 15.223451 1.2481847 0.9770480 1 1
277  47.88759 13.179675 0.8217588 0.8781508 1 1
278  52.24828 15.174409 1.0309696 1.0509759 1 0
279  34.63554 16.448472 1.3615066 1.1257788 0 0
280  50.08078 14.319630 1.0568137 0.9931675 1 0
281  27.19152 13.002295 1.1931086 0.8054877 0 0
282  46.36408 12.409832 1.0747111 0.8014032 1 0
283  50.10548 13.957945 1.2258884 0.9371702 1 0
284  49.11604 13.567827 1.3330862 0.7664524 1 1
285  48.71769 13.679187 0.9898716 0.9990495 1 0
286  50.65918 14.553213 0.8701050 1.1025855 1 0
287  53.59256 16.222982 0.8339863 1.1694796 1 1
288  51.10848 14.992903 0.8710737 1.1783713 1 0
289  53.33775 15.929418 1.3133874 1.1347754 1 0
290  47.72421 13.340224 1.0175141 0.9220813 1 0
291  56.48076 17.464860 1.2134601 1.2217340 1 1
292  50.46738 14.584325 0.8646329 1.0823780 1 0
293  51.06853 14.938319 1.2282294 1.0306586 1 0
294  22.63624 10.495248 1.2048725 0.5850557 0 0
295  51.89963 15.304454 0.7359472 1.1442089 1 1
296  23.97262 11.255990 0.7670117 0.8269097 0 0
297  50.42873 14.490697 0.9003494 1.0279958 1 1
298  48.85091 13.942681 0.8959986 0.9551079 1 1
299  48.92773 13.890629 0.8502040 0.9822331 1 0
300  56.19738 17.275033 0.8501034 1.3043364 1 1
301  30.58125 14.560427 1.0295379 1.0232676 0 0
302  53.92986 16.235437 1.1168533 1.1504721 1 1
303  49.43434 14.123079 0.9480816 0.9755168 1 1
304  30.86185 14.705856 1.1465428 1.0151295 0 0
305  52.62635 15.479559 1.1076536 1.1064115 1 0
306  21.05659  9.930195 1.1155804 0.5593176 0 0
307  53.21221 15.668532 1.1793305 1.0433981 1 1
308  50.94570 14.910788 0.9751608 1.0164972 1 1
309  45.70724 12.002314 1.0710931 0.8101594 1 0
310  53.24486 15.691720 1.0228217 1.0410580 1 1
311  33.75790 16.147068 1.0632614 1.1672968 0 0
312  43.20169 10.721045 1.0231832 0.6763198 1 0
313  28.72120 13.808255 0.4793533 1.1385499 0 0
314  23.05518 10.770930 0.8150186 0.6669256 0 1
315  52.60251 15.499084 1.0230307 1.1410890 1 0
316  27.60058 13.154602 1.0828026 0.8950150 0 0
317  49.27440 13.957405 1.1332311 0.8954437 1 0
318  30.61411 14.627024 1.3275779 0.9133766 0 0
319  48.18315 13.614916 0.7647598 1.0462538 1 0
320  28.18143 13.398751 0.9244218 0.9443288 0 0
321  49.39208 13.925070 1.3142765 0.8625846 1 0
322  51.72785 15.556928 1.0561989 1.0369835 1 1
323  58.29416 18.399314 0.7297908 1.5235153 1 0
324  33.11616 15.647755 1.2036437 1.0024918 0 1
325  55.77170 17.167741 0.8616917 1.2705556 1 1
326  29.58999 14.258578 0.8317211 0.9720010 0 1
327  51.02561 14.722054 0.8452931 1.0468540 1 1
328  50.62782 14.309268 1.0564146 1.0148212 1 0
329  53.90666 16.414921 1.0165231 1.1212006 1 1
330  49.14711 14.064858 1.1066163 0.9848575 1 0
331  49.95187 14.078380 1.1086351 0.9746469 1 0
332  55.09634 16.755950 0.9411787 1.1574885 1 1
333  27.75009 12.901157 0.8360695 0.8595480 0 1
334  49.95969 14.081423 0.9484270 1.0369169 1 0
335  44.48263 11.486824 0.8370057 0.7695925 1 0
336  51.18601 15.083008 0.8272436 1.0803040 1 1
337  56.59725 17.498155 1.1113484 1.1820181 1 1
338  54.86813 16.414835 1.2997351 1.0749514 1 1
339  44.89837 11.739661 0.7734441 0.7600013 1 1
340  50.64198 14.748953 0.7361783 1.0494964 1 1
341  32.23503 15.320742 0.9230608 1.0683742 0 1
342  50.92355 14.531985 1.2163017 1.0109516 1 0
343  53.85723 15.998715 1.1068047 1.0735559 1 1
344  29.69718 14.220529 1.0680072 0.9831190 0 0
345  43.80515 11.089729 1.2082403 0.6383226 1 0
346  49.60312 13.853043 1.2463103 0.9057071 1 0
347  28.00748 13.554856 0.8150021 0.9945141 0 0
348  47.32151 12.622024 1.2934078 0.7784850 1 0
349  29.74349 14.086694 0.8819663 1.0638242 0 0
350  52.37993 15.396054 1.3074387 0.9480285 1 1
351  34.70186 16.948205 0.9999755 1.2977514 0 0
352  50.72973 14.580957 1.0019882 0.9940998 1 1
353  32.53625 15.535895 0.8188576 1.1444164 0 1
354  43.81799 11.139519 1.0299387 0.7045568 1 0
355  35.90614 17.226929 1.5930413 1.1343990 0 0
356  52.17001 15.582352 0.8934282 1.0848838 1 1
357  27.44322 13.198362 1.0002009 0.9189148 0 0
358  31.52241 15.203292 1.1459571 1.0095561 0 1
359  54.63159 16.606560 1.0209865 1.2605324 1 0
360  49.50519 13.970923 0.9284357 1.0260321 1 0
361  52.81084 15.596815 0.9984682 1.0672442 1 1
362  51.61842 15.031084 1.0825576 1.0177461 1 1
363  50.30227 14.488754 1.0223378 0.9575902 1 1
364  27.72861 12.953476 1.0789826 0.8770747 0 0
365  53.47672 15.978482 0.9931253 1.0858962 1 1
366  54.26031 16.426527 1.0143735 1.1676140 1 1
367  31.58124 14.874588 0.9864976 1.0762392 0 0
368  34.03796 16.338109 1.1470296 1.1823501 0 0
369  59.93399 19.382200 1.1487007 1.5371299 1 0
370  53.61977 16.153361 0.7596652 1.1812062 1 1
371  51.42145 14.896434 1.0189129 1.0612011 1 0
372  49.33316 13.999230 0.9472453 1.0379054 1 0
373  46.68680 12.605350 0.9528059 0.8575641 1 0
374  47.18024 12.991935 0.7988404 1.0024292 1 0
375  51.04786 14.876482 1.0310022 0.9822134 1 1
376  48.45484 13.191405 0.9800177 0.9266192 1 0
377  31.66928 15.204095 0.7911284 1.1701597 0 0
378  55.46945 16.823651 1.1040523 1.1405202 1 1
379  30.34281 14.524301 0.8920962 1.0731965 0 0
380  49.21059 14.009087 1.2273442 0.8219521 1 1
381  28.33876 13.363224 0.9792476 0.9345578 0 0
382  45.77470 12.209292 0.7839616 0.8318700 1 1
383  52.24424 15.384259 1.0766249 1.1174458 1 0
384  27.84295 13.121100 1.1950448 0.8782850 0 0
385  50.82965 14.476149 1.0270532 0.9281951 1 1
386  51.58294 15.065928 1.0736918 1.0328260 1 0
387  47.27323 12.675116 1.0425386 0.7866620 1 1
388  33.23960 15.708994 0.9098337 1.1777989 0 0
389  54.37618 16.742821 0.9027760 1.2196653 1 1
390  52.33437 15.277919 1.1965815 0.9716111 1 1
391  33.04421 15.862830 0.9756068 1.1678505 0 0
392  47.28779 13.107188 0.7627486 0.9073416 1 1
393  27.83315 13.080204 1.0457324 0.8853061 0 0
394  28.94401 13.782882 0.8954602 1.0215950 0 0
395  52.97978 15.992090 0.9075912 1.1448124 1 1
396  28.32984 13.437786 1.1938132 0.8477548 0 1
397  53.00421 15.739860 1.2669644 1.0105424 1 1
398  52.97982 15.779453 1.0879766 1.1331591 1 0
399  50.72737 14.414005 1.2204069 0.9729379 1 0
400  53.94853 16.243093 1.1416009 1.1131168 1 1
401  61.36702 19.549267 1.4182294 1.3403194 1 1
402  35.32417 17.022713 1.3772961 1.1246722 0 1
403  31.34763 14.951647 1.2562923 0.9801434 0 0
404  52.31466 15.461914 0.6746948 1.2614461 1 0
405  26.63404 12.524491 0.8103675 0.9214975 0 0
406  49.94830 14.152192 0.7525908 1.0156903 1 1
407  57.74891 18.094471 1.0498322 1.3092167 1 1
408  46.75410 12.747649 0.9394142 0.8160660 1 1
409  33.13027 15.933331 0.9028563 1.1411153 0 1
410  46.56299 12.534378 0.7196101 0.8300148 1 1
411  52.35480 15.273907 0.9809675 1.0429223 1 1
412  50.10903 14.643854 1.0593923 1.0097758 1 1
413  26.95791 12.693497 0.9918955 0.8760705 0 0
414  49.56511 13.922429 0.8375935 0.9641335 1 1
415  53.55064 15.706724 1.2502999 1.1184193 1 0
416  29.59857 14.336045 1.2739750 0.9589094 0 0
417  27.90941 13.139246 1.0148957 0.9402073 0 0
418  22.47952 10.644517 0.6892161 0.7552730 0 0
419  31.30857 14.903353 1.1201484 0.9820648 0 1
420  31.09786 14.533266 1.2514701 0.9935444 0 0
421  50.17103 14.581750 1.0481979 1.0043041 1 1
422  48.81156 13.643228 1.1451260 0.8419562 1 1
423  53.33809 15.890491 1.1773402 1.1398781 1 0
424  45.73181 12.308656 0.6216000 0.9095000 1 1
425  28.41671 13.335491 0.9517167 0.9552962 0 0
426  23.86776 11.257635 0.8133002 0.7685454 0 0
427  53.79374 15.881092 0.9195906 1.2185830 1 0
428  29.33966 13.851656 1.2650750 0.8579479 0 1
429  31.47305 14.940321 0.9451252 1.0308567 0 1
430  50.67204 14.297697 1.3180556 0.8358310 1 1
431  52.36538 15.610165 0.9303819 1.0795457 1 1
432  31.00151 14.667136 1.0383711 1.0688215 0 0
433  51.04253 14.776198 1.0824052 1.0126678 1 0
434  50.49978 14.532482 0.9325639 0.9599094 1 1
435  48.02342 13.203584 1.0714835 0.9355330 1 0
436  34.20992 16.701158 1.0389515 1.2164714 0 0
437  47.75438 13.120817 1.1470661 0.8618144 1 0
438  29.64590 14.019919 0.7343896 1.0029220 0 1
439  53.07109 15.849042 1.2621689 1.0821193 1 0
440  52.45559 15.386933 1.1077597 1.0321131 1 1
441  27.84571 13.015312 0.8154081 0.9590981 0 0
442  49.23006 13.883419 1.0917920 0.8669762 1 1
443  59.23610 18.673901 1.2122887 1.3186591 1 1
444  48.87489 13.794284 0.9922525 0.9048583 1 1
445  54.67594 16.612257 0.9093734 1.2311738 1 1
446  47.64289 12.785022 1.2532692 0.7598532 1 1
447  22.20930 10.289334 0.9305545 0.6125578 0 0
448  50.91503 14.749040 0.9698580 1.0150730 1 1
449  32.59864 15.502975 1.1364833 1.0189318 0 1
450  49.41977 14.031027 1.1192807 0.8745422 1 1
451  53.55665 15.854692 1.0943848 1.1042419 1 1
452  53.03882 15.644766 1.3889928 0.9370094 1 1
453  53.00420 15.370773 0.9807440 1.0321525 1 1
454  53.41788 15.626803 1.3629335 0.9436832 1 1
455  51.15605 14.458916 0.8901481 1.1127273 1 0
456  51.49395 14.834181 1.1920476 0.9322647 1 1
457  49.03138 13.874100 0.9167475 0.9300289 1 1
458  46.73895 12.265399 1.1984717 0.7660801 1 0
459  35.89026 17.075058 1.2135421 1.1463546 0 1
460  48.64678 13.466758 0.9925999 0.8914103 1 1
461  46.15936 12.435494 0.6557649 0.9249984 1 1
462  35.74067 16.604735 1.1689399 1.2133850 0 0
463  54.50670 16.298957 0.7772630 1.2060065 1 1
464  22.66127 10.836542 0.9531887 0.7527129 0 0
465  34.51662 16.651656 0.8700417 1.2751438 0 0
466  45.41723 11.853850 0.9344197 0.8377524 1 0
467  31.17465 14.894977 1.1571303 0.9423110 0 1
468  27.34430 12.981108 0.8827027 0.9443765 0 0
469  46.51329 12.465668 0.9255848 0.9269071 1 0
470  51.78468 15.135300 0.8721988 1.0500935 1 1
471  39.12397 18.572819 1.2625363 1.3677467 0 0
472  50.51228 14.395364 0.9274240 1.0743541 1 0
473  48.55606 13.279455 1.1859881 0.8226884 1 1
474  50.59497 14.690014 1.0447373 0.9366070 1 1
475  44.67667 11.788977 0.8165386 0.8255089 1 0
476  52.36653 15.572423 1.0198302 1.1560272 1 0
477  24.77486 11.511847 0.9474843 0.7697255 0 0
478  52.87452 15.558747 0.9614424 1.1047662 1 1
479  49.63063 13.837230 0.9541801 0.9837255 1 0
480  46.75397 12.491510 1.0342361 0.7645544 1 1
481  56.90953 17.624409 1.1593965 1.2864574 1 0
482  49.18356 13.711843 1.0897423 0.9942743 1 0
483  30.77468 14.886811 0.8027146 1.1421782 0 0
484  51.53593 14.997592 0.9783049 1.0815600 1 0
485  50.08869 14.267844 0.9693036 0.9633312 1 1
486  49.51039 14.140027 0.8894204 0.9727350 1 1
487  50.90857 14.754415 1.0390835 1.0483161 1 0
488  52.12104 15.707595 1.0270460 1.0933050 1 1
489  44.40798 11.556984 1.1615652 0.7140147 1 0
490  31.73845 15.121718 0.9145656 1.1525659 0 0
491  27.65024 12.919220 0.9449835 0.8883021 0 0
492  47.28962 12.996619 0.8336903 0.9885459 1 0
493  35.40514 16.787887 0.9823341 1.1461243 0 1
494  47.77280 13.082648 0.6560139 0.9073395 1 1
495  55.03012 16.903113 1.0966031 1.1494610 1 1
496  25.71580 12.589354 0.9256679 0.8452799 0 0
497  47.49087 12.951375 1.2499661 0.7457241 1 1
498  54.51401 16.543835 1.0327871 1.1772757 1 1
499  47.89053 13.219630 0.9733470 0.9278837 1 0
500  54.19879 16.060930 1.1026722 1.1959197 1 0
501  30.16885 14.649150 0.9597635 1.0559297 0 0
502  47.94455 13.156745 1.0908238 0.7544405 1 1
503  33.23724 16.053127 0.5180102 1.2605412 0 1
504  31.42201 14.775737 1.3943923 0.9826164 0 0
505  48.05077 13.170240 1.2243674 0.8885536 1 0
506  36.15113 17.304654 1.1087060 1.2909771 0 0
507  48.36080 13.256850 1.2579987 0.7617736 1 1
508  51.37769 14.842470 0.8534821 1.1537773 1 0
509  56.24673 17.195797 1.2408385 1.2699752 1 0
510  46.24717 12.087015 0.8652899 0.7523946 1 1
511  49.56407 14.103933 0.8762426 1.0782889 1 0
512  48.70139 13.429176 0.9726972 0.8678705 1 1
513  29.72358 14.114808 1.2562562 0.9415833 0 0
514  37.19450 18.018602 1.1593821 1.2530982 0 1
515  47.13663 12.877636 0.9565061 0.8792267 1 0
516  57.02601 17.849174 1.2365667 1.2300622 1 1
517  47.13164 12.918554 1.0216263 0.8266758 1 0
518  49.42961 14.263938 0.8179411 0.9942969 1 1
519  22.32601 10.378763 0.8607183 0.6539668 0 0
520  31.67671 15.035779 0.9299665 1.0736446 0 1
521  48.58174 13.381291 0.8694898 0.9935561 1 0
522  47.72600 13.346610 0.5573234 1.0287683 1 0
523  55.66207 16.868323 1.1321300 1.1950666 1 1
524  40.85604  9.629712 1.2601062 0.3865951 1 1
525  51.33798 14.706763 1.1934981 0.9128921 1 1
526  51.25586 14.781980 0.8144058 1.1524183 1 0
527  50.75517 14.643285 1.0870479 1.0292740 1 0
528  49.96368 14.430176 0.8759137 1.0919522 1 0
529  51.28244 14.980212 0.7987803 1.1948320 1 0
530  49.85607 14.262645 1.1131306 0.9315614 1 1
531  47.73160 13.133935 0.8894494 0.8455083 1 1
532  54.60930 16.539000 1.1051219 1.1489753 1 1
533  48.89799 13.605498 1.1171314 0.8799575 1 0
534  52.61836 15.539797 1.2522567 1.0067152 1 1
535  53.43272 15.986629 0.9188513 1.2207408 1 0
536  50.33517 14.569758 1.3021517 0.9925818 1 0
537  56.98165 17.557999 0.8185395 1.4371180 1 0
538  28.58206 13.070595 1.2104438 0.8525153 0 0
539  53.08123 15.660522 1.4113121 1.0174176 1 1
540  52.37782 15.337967 1.0174954 1.0254710 1 1
541  27.21838 12.818479 0.9084091 0.8109882 0 1
542  51.65626 14.982809 0.9331566 1.0479842 1 1
543  48.82224 13.830817 0.6125630 1.0063500 1 1
544  50.69595 14.602454 0.6569884 1.0889107 1 1
545  48.90269 13.687385 1.0756046 0.8593226 1 1
546  28.91189 13.846095 0.6218584 1.1142030 0 0
547  47.92631 12.998609 1.0083179 0.8705750 1 1
548  49.53557 14.083512 1.1575876 0.9609567 1 0
549  45.13515 11.960136 0.9029281 0.8411744 1 0
550  45.06206 11.799168 0.7948185 0.7273207 1 1
551  45.54114 12.142435 0.8758760 0.7967039 1 1
552  31.23474 15.056035 1.1038036 1.0077480 0 1
553  23.39002 10.873312 0.8379622 0.7155113 0 0
554  56.12861 17.259405 1.2788431 1.1775152 1 1
555  31.58106 14.957125 0.8666944 1.1338261 0 0
556  29.39495 14.148477 0.7132346 1.1063660 0 0
557  54.10107 16.578462 0.8832146 1.2839608 1 0
558  50.26701 14.661144 0.8262391 1.0170707 1 1
559  55.80712 17.412223 0.9687393 1.2632992 1 1
560  49.83569 14.271957 0.8511308 1.0204801 1 1
561  49.29456 14.073583 0.9863243 0.9232602 1 1
562  25.48979 11.851661 1.0556195 0.7973138 0 0
563  48.30976 13.449000 1.0179285 0.9366153 1 0
564  44.01751 11.110136 1.1552855 0.6792351 1 0
565  46.26673 12.024473 0.8019663 0.7809359 1 1
566  46.60680 12.763392 0.7626308 0.9508524 1 0
567  53.24961 15.767002 0.9856489 1.0986634 1 1
568  43.63088 11.058397 1.0127952 0.6332389 1 1
569  30.85869 14.389223 1.0813083 1.0053547 0 0
570  55.85015 17.159009 1.1842125 1.2404414 1 0
571  49.11619 14.009821 1.2539228 0.9010096 1 0
572  25.39042 12.020168 1.0293116 0.7766335 0 0
573  48.59831 13.308396 0.9676231 0.8997017 1 0
574  50.21032 14.380942 1.1627643 0.9615540 1 0
575  50.33496 14.184629 0.9908660 1.0110864 1 0
576  44.88348 11.839775 1.1024380 0.7706640 1 0
577  53.03967 15.974219 0.8978788 1.1450343 1 1
578  46.80758 12.756925 0.8767565 0.8231982 1 1
579  51.30239 14.865517 0.8679424 1.1113529 1 0
580  51.65630 15.139605 1.2981091 0.9965904 1 0
581  53.96282 16.265212 0.9380071 1.1368460 1 1
582  53.08095 15.848629 1.0461570 1.0859892 1 1
583  54.71968 16.572767 1.0195464 1.1309779 1 1
584  48.37725 13.509615 0.7932848 0.9130188 1 1
585  52.42103 15.570053 1.1047915 1.0587735 1 1
586  44.14496 11.578976 0.6691463 0.7434285 1 1
587  37.34951 17.718927 1.1881261 1.2465219 0 1
588  51.06948 14.695983 0.8982782 1.0122352 1 1
589  54.86350 16.568059 1.1283929 1.1220223 1 1
590  29.22700 13.984190 1.0865612 0.8929551 0 1
591  48.89385 14.183062 1.2010527 0.9181541 1 1
592  49.70145 13.741513 1.0536433 0.9781154 1 0
593  28.52872 13.533459 0.9485566 0.9679894 0 0
594  44.38806 11.674161 0.9581474 0.7529678 1 0
595  48.77544 13.657247 1.0969043 0.8371287 1 1
596  51.65323 15.296275 1.0490962 1.0137766 1 1
597  46.77337 12.595664 1.4246009 0.7457189 1 0
598  46.60398 12.493582 0.9803829 0.7825766 1 1
599  32.74446 15.736437 0.8442669 1.2040672 0 0
600  34.27003 16.082197 1.3876357 1.0737671 0 0
601  59.17198 18.617553 1.3399396 1.2671568 1 1
602  53.64198 15.843388 1.3500620 1.0199943 1 1
603  50.04000 14.466796 1.0157698 0.9843697 1 1
604  48.34038 13.528925 1.1310223 0.8454329 1 1
605  54.32810 16.573331 0.9530983 1.1619923 1 1
606  50.73281 14.865497 1.2521719 1.0220904 1 0
607  47.29022 12.787324 0.7982435 0.8538903 1 1
608  48.92917 13.615580 0.9828763 0.9740901 1 0
609  46.21904 12.306643 0.9239420 0.7789476 1 1
610  42.57701 10.597262 0.8974164 0.6239115 1 1
611  53.82075 16.190027 0.8781362 1.2118955 1 1
612  31.94962 15.346928 1.2413554 0.9601849 0 1
613  49.40245 13.809779 1.0190505 0.9098182 1 1
614  20.87367  9.566718 0.8098880 0.6230034 0 0
615  30.37518 14.403702 1.0884398 1.0316653 0 0
616  44.40110 11.543128 0.9824157 0.6948543 1 1
617  48.57592 13.772895 1.1327479 0.9623984 1 0
618  47.45710 13.112798 1.0419639 0.9166502 1 0
619  24.65454 11.543488 0.8592954 0.7922601 0 0
620  49.66659 13.781017 0.8864344 0.9644057 1 1
621  53.37506 15.901543 1.1187706 1.1268849 1 0
622  51.33352 14.864417 0.7363316 1.1061209 1 1
623  47.80103 13.074490 1.3569751 0.8018714 1 0
624  29.61441 13.849866 0.6435373 1.0768161 0 1
625  53.27300 15.949972 0.7387848 1.2471284 1 0
626  25.66348 11.927704 0.8739689 0.7874453 0 1
627  52.12099 15.483254 1.0770991 1.0624407 1 1
628  28.90204 13.865332 0.9946139 0.8736234 0 1
629  52.84118 15.658463 0.9798824 1.1557133 1 0
630  51.63120 15.008394 1.0797568 1.1441357 1 0
631  32.99851 16.054106 0.8395947 1.2319209 0 0
632  49.60537 14.059091 0.9850412 0.9884924 1 0
633  47.83650 13.208570 0.8879611 0.9730042 1 0
634  55.96342 17.388093 0.9949252 1.3118089 1 0
635  34.29668 16.274541 1.1951832 1.1573009 0 0
636  26.96452 12.695744 0.8164905 0.9215734 0 0
637  54.59730 16.443637 0.9440186 1.1811150 1 1
638  53.78716 16.068890 0.8236601 1.1794157 1 1
639  54.71746 16.664033 1.2889779 1.0620024 1 1
640  47.78941 13.386248 1.0566128 0.9361477 1 0
641  50.10055 14.326262 0.9543406 1.0503819 1 0
642  26.34759 12.731304 0.8518338 0.9014539 0 0
643  50.40866 14.348254 1.1671333 0.9526134 1 0
644  40.10067  9.460486 1.0735265 0.5668214 1 0
645  47.22827 12.857321 0.8157106 0.9476731 1 0
646  29.80718 14.190758 1.1654303 0.9754924 0 0
647  50.50161 14.590613 1.0488754 0.9051617 1 1
648  52.50470 15.269905 1.0051584 1.0189963 1 1
649  34.58517 16.630311 0.6346462 1.3598394 0 0
650  25.90224 12.013476 1.0210338 0.7552252 0 0
651  48.31096 13.655541 1.1398538 0.9227701 1 0
652  52.93791 15.521087 1.2405629 1.0597477 1 0
653  50.04799 14.025575 1.1332364 0.9839800 1 0
654  51.43916 14.666603 1.2709081 0.9246848 1 1
655  52.74611 15.476386 1.2310088 1.0338072 1 1
656  47.96229 13.110405 0.6866833 0.8985852 1 1
657  51.04835 14.616767 0.8636378 1.0187039 1 1
658  31.80850 15.176489 0.9370833 1.1030258 0 0
659  54.45464 16.313151 1.0660310 1.1261501 1 1
660  53.67379 16.068590 0.8553041 1.2179647 1 0
661  32.09278 15.431085 0.8257621 1.1847534 0 0
662  48.86141 13.676702 1.0848023 0.9355082 1 0
663  53.79087 16.201953 0.9520606 1.1590016 1 1
664  27.75248 13.111068 0.7077231 1.0122715 0 0
665  29.54952 14.311517 1.0284257 1.0234997 0 0
666  44.11088 11.267938 0.9246693 0.7233136 1 0
667  51.52190 14.964132 1.4049924 0.9502569 1 0
668  45.26513 11.780284 0.6641510 0.8015311 1 1
669  53.11618 15.915478 1.0504790 1.1201588 1 1
670  54.04777 16.434358 1.0074846 1.1506062 1 1
671  50.09030 13.976560 1.2784311 0.8543929 1 1
672  48.83378 13.819249 0.8426608 1.0053754 1 0
673  50.56722 14.577111 1.0482682 0.9723741 1 1
674  49.95269 14.066491 1.0718710 0.8915203 1 1
675  53.63594 15.780875 0.8791087 1.0904948 1 1
676  51.54678 15.035157 1.1228809 0.9954233 1 1
677  34.48976 16.233779 1.1843520 1.1128315 0 1
678  45.90400 12.025701 0.9146083 0.8205475 1 0
679  46.74996 12.370638 1.0066266 0.8990296 1 0
680  26.41515 12.587434 0.8012665 0.9249892 0 0
681  48.06055 13.386134 0.9710987 0.9562081 1 0
682  55.82989 17.294762 0.9312353 1.3740075 1 0
683  48.81395 13.731651 1.1274445 0.9076041 1 0
684  34.56305 16.621149 0.9337666 1.2659254 0 0
685  53.92893 16.257674 1.1506000 1.0970565 1 1
686  52.57024 15.678123 0.9303760 1.1098591 1 1
687  44.09155 11.452359 0.9103082 0.7704944 1 0
688  57.08621 17.570042 0.9597370 1.2970668 1 1
689  47.81262 12.732099 1.0441173 0.8820869 1 0
690  51.60602 14.976367 1.3575072 1.0465796 1 0
691  28.46437 13.418706 0.8848384 0.9724221 0 0
692  48.92573 13.720979 0.7684540 0.9400831 1 1
693  49.69819 14.214140 0.8322556 1.0016426 1 1
694  50.03843 14.187017 0.8236623 1.0528048 1 0
695  30.31639 14.273593 1.1457256 0.8879136 0 1
696  44.58267 11.486191 0.7862000 0.7319777 1 1
697  27.92090 13.123129 0.7816656 0.8621589 0 1
698  55.77452 17.375472 1.3239737 1.1297731 1 1
699  49.19133 13.833422 0.8517747 0.9434249 1 1
700  51.79697 14.631015 1.3807972 0.8938553 1 1
701  24.60679 11.702177 0.8271513 0.8154081 0 0
702  51.89040 15.396224 0.9604294 1.0786813 1 1
703  57.51622 18.007317 1.1822474 1.2817568 1 1
704  30.64254 14.449058 0.7798644 1.0869011 0 0
705  54.20826 16.359482 1.2108562 1.1026159 1 1
706  28.28298 13.289851 0.9974964 0.8834300 0 1
707  29.74489 14.137430 1.2739572 0.9413336 0 0
708  31.27098 15.135526 0.8749946 1.0616530 0 1
709  44.77923 11.966013 0.6592278 0.9129336 1 0
710  48.71490 13.886485 1.0368262 0.9375355 1 1
711  52.50605 15.626241 0.9139867 1.2314790 1 0
712  48.88611 13.606963 1.1059540 0.8810196 1 1
713  56.19297 17.320103 1.0481441 1.2095086 1 1
714  55.80886 16.839125 1.2331881 1.1701449 1 1
715  39.66683  9.433858 0.2029869 0.7802054 1 0
716  49.04156 14.063854 0.9627730 1.0097403 1 0
717  33.63481 16.093673 1.0842634 1.1796889 0 0
718  49.03388 13.743844 0.8300068 1.0096004 1 0
719  52.80503 15.592813 1.0940297 1.0822613 1 1
720  48.57565 13.486796 1.1429039 0.8774649 1 0
721  51.05824 14.892960 0.7818095 1.0755988 1 1
722  26.90422 12.715730 0.9288233 0.9214804 0 0
723  50.04362 14.342743 1.1208875 0.9842133 1 0
724  51.36860 15.054574 1.0981274 1.0585865 1 0
725  47.12227 12.997973 0.8150713 0.9541534 1 0
726  56.02896 17.156811 1.4565999 1.0841376 1 1
727  52.99465 15.467571 0.8315143 1.1073079 1 1
728  31.16382 15.086385 0.9086496 1.1586649 0 0
729  49.51408 14.024737 1.1087871 0.9162602 1 1
730  48.50561 13.512999 0.8570170 0.9071840 1 1
731  49.06495 14.074857 0.9270581 0.9882067 1 1
732  51.19793 14.814111 1.1258581 1.0557613 1 0
733  53.00191 15.527982 1.1613844 1.1061770 1 0
734  54.16836 16.163848 1.2042490 1.0676048 1 1
735  27.28894 12.848013 1.1649164 0.8078948 0 0
736  25.89813 12.490870 0.8407934 0.8790506 0 0
737  22.54023 10.925680 0.9646719 0.7143441 0 0
738  49.04716 13.826727 0.8459366 0.9437741 1 1
739  56.59476 17.581616 1.0860651 1.2510788 1 1
740  49.64016 14.204286 0.8451258 0.9763139 1 1
741  30.22973 14.197695 1.1548806 0.9582958 0 0
742  53.15101 15.819646 1.0351725 1.1170235 1 1
743  47.53008 12.848183 0.9587614 0.8040008 1 1
744  52.99088 15.786679 1.0308085 1.1645473 1 0
745  50.62649 14.708555 1.1456484 1.0573105 1 0
746  51.73608 15.192500 0.9842347 1.1100641 1 0
747  57.83757 18.024155 1.0391403 1.3425493 1 1
748  47.17095 12.943545 0.8966754 0.9806854 1 0
749  53.46575 16.025868 1.0351311 1.1185373 1 1
750  45.82824 12.259768 0.8339050 0.8525766 1 0
751  47.75225 13.212652 1.0445034 0.8234706 1 1
752  53.43500 16.042754 0.8635126 1.1534406 1 1
753  51.16337 14.921758 1.3728632 0.9725424 1 0
754  42.52724 10.472495 0.8794855 0.6659302 1 0
755  30.53196 14.645127 0.4692718 1.2560991 0 0
756  48.49554 13.423157 1.0219831 0.9498550 1 0
757  31.21565 14.943250 0.8971314 1.0464089 0 1
758  49.43688 14.254768 0.8665251 1.0386116 1 1
759  49.28129 14.162539 1.2343496 0.8964789 1 1
760  46.07500 12.272044 1.1327634 0.7201321 1 1
761  53.24303 16.044720 0.9111962 1.2451639 1 0
762  28.06033 13.573177 0.7547997 0.9158767 0 1
763  50.97745 14.735595 1.0285734 1.0704706 1 0
764  48.98534 13.918562 1.1661609 0.9728985 1 0
765  53.89139 16.001521 1.1744881 1.0959954 1 1
766  52.99847 15.938365 0.8388637 1.2462076 1 0
767  48.26456 13.560856 0.6121461 1.1095808 1 0
768  49.56343 14.046541 1.0945535 0.9698514 1 0
769  56.59675 17.780071 1.1594859 1.2356929 1 1
770  50.07143 13.900191 0.9117865 1.0163902 1 0
771  49.18936 14.213576 0.7831380 1.1078779 1 0
772  43.29044 11.262633 0.9093406 0.7492033 1 0
773  49.48992 13.847241 0.7325504 1.0562069 1 0
774  32.68607 15.701305 1.2086406 1.0188006 0 1
775  29.29453 14.009636 1.2326282 0.9462778 0 0
776  51.10568 15.091734 0.9593734 1.0286863 1 1
777  29.03953 13.764252 1.1506446 0.9259251 0 0
778  48.00779 13.284323 0.8421836 0.9560145 1 0
779  49.58520 14.134932 0.9935317 0.9468627 1 1
780  30.23319 14.349744 0.8401217 1.1105378 0 0
781  44.94397 11.781301 1.2234417 0.6274912 1 1
782  31.51651 14.987627 1.0633632 0.9938164 0 1
783  53.50881 15.941178 0.8603351 1.2364466 1 0
784  42.28069 10.806336 0.6360427 0.7264347 1 1
785  55.16919 16.818976 1.0730109 1.2484961 1 0
786  24.60610 11.289171 1.1652935 0.6931720 0 0
787  47.56153 13.065077 1.0702335 0.7871382 1 1
788  47.61820 13.065331 0.6404370 1.0685380 1 0
789  27.61349 13.094774 0.8645533 0.8888143 0 1
790  36.44769 17.377107 1.2818228 1.1889603 0 1
791  50.86413 14.700436 0.9617343 1.1060498 1 0
792  30.52891 14.552040 1.1851065 1.0195621 0 0
793  28.04449 13.222653 1.3231026 0.8312206 0 0
794  29.57922 14.151278 0.9433401 0.9837270 0 1
795  52.36524 15.366932 1.0723360 1.0087843 1 1
796  49.45783 13.889588 1.2957432 0.8043203 1 1
797  49.79344 14.008803 1.2209588 0.8327437 1 1
798  51.90156 15.411012 1.0365141 1.1544298 1 0
799  53.52597 15.798176 1.3421922 0.9718523 1 1
800  46.93496 12.676015 1.1412813 0.8163058 1 0
801  52.82953 15.627070 1.1014274 1.0853052 1 1
802  50.99277 14.877158 0.6050421 1.1050118 1 1
803  50.14062 14.371231 0.7383967 1.1814261 1 0
804  46.57382 12.707639 0.7872266 0.9358044 1 0
805  26.30722 12.303041 1.1280130 0.7945265 0 0
806  48.57599 13.438683 0.9316001 0.9609296 1 0
807  46.14672 12.220804 1.0500259 0.7235507 1 1
808  51.56760 14.828686 1.1297076 1.0269075 1 0
809  51.12229 14.992397 0.9271764 1.0339156 1 1
810  51.46313 15.028761 0.7925545 1.2030215 1 0
811  50.76393 14.669962 1.0269367 1.0389442 1 0
812  54.66098 16.599845 0.8423095 1.1990967 1 1
813  43.09544 10.820497 1.1437520 0.6872864 1 0
814  43.46448 11.281265 0.8148621 0.8238470 1 0
815  53.20839 15.985933 0.7731436 1.1857275 1 1
816  53.79919 16.342228 0.8874162 1.1666448 1 1
817  55.06670 16.838156 0.9139147 1.2645705 1 1
818  55.72681 17.144858 1.0360058 1.2846070 1 0
819  50.39991 14.187455 1.1250901 0.8783284 1 1
820  25.85944 12.011758 0.8612693 0.8182894 0 0
821  30.38175 14.370472 0.8615555 1.0898080 0 0
822  51.33111 14.988879 0.8623549 1.1364290 1 0
823  50.45422 14.467981 0.7240134 1.0968045 1 1
824  35.36531 16.720363 1.4435923 1.1255773 0 0
825  29.57487 13.735842 1.1157379 0.8663633 0 1
826  48.23989 13.321368 1.1073478 0.9156885 1 0
827  46.53691 12.651938 0.8855728 0.8348085 1 1
828  45.04170 11.813084 0.8951675 0.8296336 1 0
829  45.98845 12.496829 1.0185870 0.7668180 1 1
830  46.82393 12.568088 1.2416149 0.6821414 1 1
831  46.17201 12.540375 0.8355446 0.8970661 1 0
832  32.72368 15.717853 1.0350954 1.1727883 0 0
833  53.12562 15.805672 1.2944381 1.1057257 1 0
834  30.18342 14.140429 0.9142535 1.0402104 0 0
835  26.16399 12.278253 1.0287061 0.7997669 0 0
836  30.04681 14.263442 1.0689514 0.9991827 0 0
837  25.32366 11.818238 0.8360799 0.8476090 0 0
838  29.69616 14.146198 1.1576325 0.9768646 0 0
839  60.36017 19.168600 1.2050008 1.3679189 1 1
840  34.09424 16.256608 0.9906021 1.1503659 0 1
841  29.49128 14.127302 0.8442138 0.9685762 0 1
842  32.04546 15.273298 1.1166732 1.0744981 0 0
843  45.93349 12.210052 1.0649706 0.8191471 1 0
844  46.41832 12.588738 0.8700831 0.8955312 1 0
845  53.98734 16.481527 1.0569433 1.2424702 1 0
846  53.22255 15.908577 0.9734374 1.1438735 1 0
847  28.72424 13.782544 0.7427248 1.0333215 0 0
848  29.51880 13.673781 1.2135833 0.8868085 0 0
849  49.67600 13.896217 1.1944705 0.8122437 1 1
850  27.76911 13.061941 0.9987986 0.8859464 0 0
851  29.01363 13.712273 1.1829633 0.9005833 0 0
852  24.87060 11.688536 1.1436468 0.7697583 0 0
853  49.37908 13.771439 1.0975050 0.9172197 1 0
854  30.57434 14.409170 0.7692210 1.1077027 0 0
855  54.23810 16.238231 1.4907610 1.1055673 1 0
856  32.98816 15.868898 1.0339115 1.1303734 0 1
857  24.81997 11.589502 1.1457817 0.7275188 0 0
858  49.52370 14.229884 0.7905705 1.0785410 1 0
859  51.79287 15.224896 1.2500649 0.9516909 1 1
860  44.43149 11.608824 0.9385093 0.8162861 1 0
861  28.05324 13.201220 0.9647108 0.8387804 0 1
862  44.93483 11.373328 0.8999603 0.7331234 1 0
863  51.53438 15.006856 0.8918716 1.0770689 1 1
864  56.19261 17.225428 1.3189820 1.1394472 1 1
865  50.42660 14.481352 0.8201214 1.0946312 1 0
866  53.11546 15.927990 1.2022527 1.1312138 1 0
867  55.37625 16.746675 1.0421499 1.1971305 1 1
868  50.22196 14.289982 0.9017518 1.0217024 1 0
869  58.24892 18.121611 1.1721584 1.2819102 1 1
870  43.25868 10.738039 0.9417084 0.6755609 1 0
871  34.45407 16.496834 0.8774607 1.2394661 0 1
872  32.59481 15.460056 0.7546483 1.2216506 0 0
873  44.78969 11.769752 0.9026925 0.7276069 1 1
874  52.17450 15.346621 0.7698644 1.1258785 1 1
875  31.01501 15.047918 0.7701838 1.1919008 0 0
876  27.50409 13.013367 1.0961784 0.8765270 0 0
877  49.84658 14.403508 0.8870203 1.0838475 1 0
878  34.01860 16.355722 0.9619346 1.1189174 0 1
879  55.58464 17.168540 0.8762885 1.2604667 1 1
880  48.71264 13.662324 0.8452262 0.9546491 1 1
881  52.21203 15.408328 0.9027689 1.0675895 1 1
882  49.91700 14.020246 1.0280969 0.9043569 1 1
883  52.81439 15.476704 0.9197849 1.0919561 1 1
884  51.73233 15.520177 0.9386332 1.1163837 1 1
885  47.16095 12.682907 1.1169911 0.7834847 1 1
886  54.04216 16.333977 0.7499149 1.2393702 1 1
887  34.04507 16.393066 0.8347107 1.2017762 0 1
888  32.36499 15.109750 0.8180539 1.0827577 0 1
889  51.49782 14.986233 1.1040410 1.0329352 1 0
890  50.89659 14.457165 0.6948410 1.0583784 1 1
891  45.79662 12.249349 1.1231808 0.7477130 1 0
892  52.45760 15.508523 1.1430597 1.0166010 1 1
893  46.67769 12.509631 1.2456590 0.8039161 1 0
894  48.77450 13.696702 0.8421024 0.9298598 1 1
895  54.30519 16.457064 1.0899600 1.2115218 1 0
896  25.54623 12.213166 1.0630744 0.8188360 0 0
897  31.29007 14.925743 0.7899120 1.1641030 0 0
898  44.80103 11.983503 0.9178763 0.8415200 1 0
899  36.90925 17.542826 1.6062037 1.0835305 0 1
900  48.16367 13.540627 0.9396344 0.8426691 1 1
901  53.95936 16.208837 1.0326484 1.1268256 1 1
902  22.41332 10.635873 0.8323856 0.7084954 0 0
903  22.06315 10.411806 0.9182417 0.6837820 0 0
904  51.74149 15.307654 0.9913233 1.0405679 1 1
905  43.91966 11.188396 1.1790386 0.5612129 1 1
906  54.32255 16.450137 1.2203619 1.1832955 1 0
907  48.56991 13.825899 0.9043013 1.0343194 1 0
908  55.85971 17.161635 1.0563537 1.2363859 1 1
909  49.58210 14.274196 0.9416281 0.9771118 1 1
910  53.06499 15.657061 1.3121124 1.0529897 1 0
911  52.12952 15.236468 1.1513358 1.0666940 1 0
912  49.22673 14.055477 1.0667558 0.9490725 1 1
913  52.62183 15.434817 0.9117369 1.0806932 1 1
914  48.09331 13.207501 0.7650556 0.8877870 1 1
915  25.89375 12.577144 0.9722475 0.8620315 0 0
916  52.35689 15.452980 1.4110935 1.0443542 1 0
917  26.50798 12.582016 0.9432631 0.8878386 0 0
918  31.37573 14.878745 1.0120659 0.9873969 0 1
919  48.60924 13.251736 1.0370870 0.8229705 1 1
920  48.41488 13.276002 1.0238369 0.8522801 1 1
921  27.19475 12.608536 1.0600481 0.8656612 0 0
922  57.26722 17.890400 0.9216721 1.3862760 1 0
923  52.12690 15.331251 0.7060559 1.1157144 1 1
924  30.97190 14.682851 1.2099298 0.9261731 0 1
925  27.55711 13.135620 0.6052812 1.0696072 0 0
926  49.12563 13.759837 0.7194243 1.0618014 1 0
927  47.30694 12.854204 0.8838615 0.8863083 1 1
928  53.17893 15.863566 1.0443969 1.1106773 1 1
929  52.80819 15.734015 0.9452384 1.1110480 1 1
930  25.95052 11.860893 1.3421663 0.6786345 0 0
931  54.57573 16.100942 1.0988258 1.1673174 1 0
932  22.99546 10.941615 1.0368357 0.6850649 0 0
933  48.01732 12.947791 1.3856094 0.7705374 1 0
934  25.48421 12.062288 1.1352129 0.7908673 0 0
935  30.84473 14.589007 0.8805621 0.9983303 0 1
936  28.70991 13.660679 0.9143261 1.0178864 0 0
937  27.40189 12.727905 1.2936873 0.7650676 0 0
938  32.35423 15.578469 1.1482652 1.1013253 0 0
939  32.32784 15.491803 1.1912587 1.0306764 0 1
940  35.69622 17.086753 1.3422246 1.1488151 0 1
941  51.81946 15.042783 1.1030276 0.9919245 1 1
942  44.87817 11.608736 1.0397976 0.7390734 1 0
943  51.92530 14.929240 1.2014043 0.9966895 1 1
944  26.77862 12.570871 0.8572422 0.9118128 0 0
945  29.32118 13.993153 1.0970506 0.9611487 0 0
946  59.12776 18.673627 1.0720571 1.4253112 1 1
947  31.97405 15.300662 0.9797142 1.0547799 0 1
948  24.05585 11.201985 0.8233605 0.8001750 0 0
949  37.83292 18.240694 0.7859597 1.3959868 0 1
950  45.61265 12.120668 0.8573143 0.8331741 1 0
951  52.56496 15.530680 0.8176691 1.1900961 1 0
952  46.06050 12.338675 0.7297460 0.9034046 1 0
953  28.91175 13.548654 1.4063756 0.8672310 0 0
954  42.93509 10.769823 0.7694359 0.7909890 1 0
955  26.13790 12.585822 0.8087348 0.8105643 0 1
956  30.19289 14.454659 1.1370693 0.9930123 0 0
957  27.13676 13.030747 1.1037349 0.7768922 0 1
958  51.41933 15.183592 0.8963564 1.0248554 1 1
959  53.60496 15.986642 1.0257424 1.1358727 1 1
960  31.61018 14.945439 1.2085902 1.0435348 0 0
961  29.79811 14.142946 1.0291304 0.9936718 0 0
962  44.03713 11.304867 0.8190669 0.7986680 1 0
963  50.05480 14.081063 0.7501491 1.0841612 1 0
964  25.55991 12.465524 0.8733261 0.9105950 0 0
965  42.35439 10.567609 1.1458911 0.5920374 1 0
966  46.04759 12.287938 1.1271525 0.8019599 1 0
967  48.92610 13.712791 0.9056868 0.8942962 1 1
968  30.21039 14.052600 0.8635848 1.0500788 0 0
969  48.20169 13.277339 1.0131509 0.8442083 1 1
970  32.57739 15.282765 1.0088003 1.0994299 0 0
971  55.17982 16.887423 1.2042246 1.1386386 1 1
972  51.15342 15.088922 0.6814331 1.1763847 1 0
973  29.75093 14.118413 1.2067265 0.9355223 0 0
974  55.15923 16.492843 1.0806753 1.1410829 1 1
975  34.21327 16.080924 1.1998787 1.1362499 0 0
976  32.94339 15.512973 1.0832437 1.0560722 0 1
977  47.46456 12.982457 0.9490122 0.9236335 1 0
978  49.01459 13.731640 1.2178351 0.8860783 1 0
979  22.34411 10.333607 0.9634073 0.6225614 0 0
980  33.25805 15.745097 1.0206258 1.1889203 0 0
981  52.90199 15.856293 0.9790870 1.1371657 1 1
982  54.71140 16.562077 1.2704805 1.1404007 1 0
983  23.34336 10.949448 1.1322404 0.6956216 0 0
984  29.49482 13.932619 0.9721335 0.9900033 0 0
985  45.92881 12.101482 0.9695169 0.8159032 1 0
986  54.94663 16.801729 1.2853151 1.1439736 1 1
987  46.17019 12.227453 1.1075307 0.7833003 1 0
988  51.66286 15.166607 1.1187765 1.0161468 1 1
989  52.74965 15.494434 0.9534651 1.0730838 1 1
990  52.68531 15.760886 0.7836812 1.2516682 1 0
991  51.13768 14.672687 1.0309638 1.0607841 1 0
992  47.19347 12.978354 0.8252033 0.8642600 1 1
993  36.30716 17.122624 1.2684696 1.1457979 0 1
994  48.96454 13.695108 1.1198720 0.8877226 1 1
995  56.27637 17.095255 1.0942861 1.2861726 1 0
996  50.13957 14.148744 1.1134708 0.9639903 1 0
997  52.08326 15.185800 1.0213415 1.0745145 1 1
998  34.20288 16.523356 1.0547399 1.1703991 0 1
999  53.70036 16.012984 1.0780828 1.1083886 1 1
1000 32.00371 15.137230 1.2272286 1.0003937 0 1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("simulate-abn", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("simulate-dag")
> ### * simulate-dag
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: simulateDag
> ### Title: Simulate DAGs
> ### Aliases: simulateDag simulate.dag
> ### Keywords: utilities
> 
> ### ** Examples
> 
> ## Example using Ozon entries:
> dist <- list(Ozone="gaussian",   Solar.R="gaussian",  Wind="gaussian", 
+              Temp="gaussian",    Month="gaussian",    Day="gaussian")
> out <- simulateDag(node.name = names(dist), data.dists = dist, nn = 0.8)
> 
> plot(out)
dev.new(): using pdf(file="Rplots1.pdf")
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("simulate-dag", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("tographviz")
> ### * tographviz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: tographviz
> ### Title: Convert a DAG into graphviz format
> ### Aliases: tographviz
> ### Keywords: device
> 
> ### ** Examples
> 
> ## On a typical linux system the following code constructs a nice
> ## looking pdf file 'graph.pdf'.
> 
> ## Subset of a build-in dataset
> mydat <- ex0.dag.data[,c("b1","b2","b3","g1","b4","p2","p4")]
> 
> ## setup distribution list for each node
> mydists <- list(b1="binomial", b2="binomial", b3="binomial",
+                 g1="gaussian", b4="binomial", p2="poisson",
+                 p4="poisson")
> ## specify DAG model 
> mydag <- matrix(c(   0,1,0,0,1,0,0, # 
+                      0,0,0,0,0,0,0, #
+                      0,1,0,0,1,0,0, # 
+                      1,0,0,0,0,0,1, # 
+                      0,0,0,0,0,0,0, #
+                      0,0,0,1,0,0,0, #
+                      0,0,0,0,1,0,0  #
+                      ), byrow=TRUE, ncol=7)
>                      
> colnames(mydag) <- rownames(mydag) <- names(mydat)
> 
> ## create file for processing with graphviz
> tographviz(dag.m=mydag, data.df=mydat, data.dists=mydists,
+            outfile=paste(tempdir(), "graph.dot", sep="/"), directed=TRUE)
> ## and then process using graphviz tools e.g. on linux
> # system("dot -Tpdf -o graph.pdf graph.dot")
> # system("evince graph.pdf")
> 
> ## Example using data with a group variable  where b1<-b2
> mydag <- matrix(c(0,1, 0,0), byrow=TRUE, ncol=2)
> 
> colnames(mydag) <- rownames(mydag) <- names(ex3.dag.data[,c(1,2)])
> ## specific distributions
> mydists <- list(b1="binomial", b2="binomial")
> 
> ## create file for processing with graphviz
> tographviz(dag.m=mydag, data.df=ex3.dag.data[,c(1,2,14)], data.dists=mydists,
+            group.var="group", 
+            outfile=paste(tempdir(), "graph.dot", sep="/"), directed=FALSE)
> ## and then process using graphviz tools e.g. on linux
> # system("dot -Tpdf -o graph.pdf graph.dot")
> # system("evince graph.pdf");
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("tographviz", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("var33")
> ### * var33
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: var33
> ### Title: simulated dataset from a DAG comprising of 33 variables
> ### Aliases: var33
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## Constructing the DAG of the dataset:  
> dag33 <- matrix(0, 33, 33)
> dag33[2,1] <- 1
> dag33[4,3] <- 1
> dag33[6,4] <- 1; dag33[6,7] <- 1
> dag33[5,6] <- 1
> dag33[7,8] <- 1  
> dag33[8,9] <- 1
> dag33[9,10] <- 1
> dag33[11,10] <- 1; dag33[11,12] <- 1; dag33[11,19] <- 1;
> dag33[14,13] <- 1
> dag33[17,16] <- 1; dag33[17,20] <- 1
> dag33[15,14] <- 1; dag33[15,21] <- 1
> dag33[18,20] <- 1
> dag33[19,20] <- 1
> dag33[21,20] <- 1
> dag33[22,21] <- 1
> dag33[23,21] <- 1
> dag33[24,23] <- 1
> dag33[25,23] <- 1; dag33[25,26] <- 1
> dag33[26,20] <- 1
> dag33[33,31] <- 1
> dag33[33,31] <- 1
> dag33[32,21] <- 1; dag33[32,31] <- 1; dag33[32,29] <- 1    
> dag33[30,29] <- 1
> dag33[28,27] <- 1; dag33[28,29] <- 1; dag33[28,31] <- 1   
>     
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("var33", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  113.123 0.217 113.35 0 0 
> grDevices::dev.off()
pdf 
  2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
